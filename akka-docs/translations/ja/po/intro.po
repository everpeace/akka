# Japanese translations for Akka package.
# Copyright (C) 2011, Typesafe Inc
# This file is distributed under the same license as the Akka package.
# Rikiya Yamamoto <rkyymmt@gmail.com>, 2012.
#
msgid ""
msgstr ""
"Project-Id-Version: Akka 2.0-SNAPSHOT\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-10 21:41\n"
"PO-Revision-Date: 2012-04-16 17:20+0900\n"
"Last-Translator: Rikiya Yamamoto <rkyymmt@gmail.com>\n"
"Language-Team: Japanese <translation-team-ja@lists.sourceforge.net>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Language: ja\n"
"Plural-Forms: nplurals=1; plural=0;\n"

# 01982b7cc5554352982d1c645f04d648
#: ../../intro/deployment-scenarios.rst:5
msgid "Use-case and Deployment Scenarios"
msgstr "ユースケースとデプロイシナリオ"

# e74743ee0ce347c8be83fd43b541a01c
#: ../../intro/deployment-scenarios.rst:8
msgid "How can I use and deploy Akka?"
msgstr "どうすればAkkaを利用・デプロイできますか？"

# 2c955dd08cfe44bf8a2c7705e610c9d9
#: ../../intro/deployment-scenarios.rst:10
msgid "Akka can be used in different ways:"
msgstr "Akkaは次のような異なる方法で使用することが出来ます。"

# cf5a5b78b39841e9bbd025a517fa0768
#: ../../intro/deployment-scenarios.rst:12
msgid ""
"As a library: used as a regular JAR on the classpath and/or in a web app, to "
"be put into ``WEB-INF/lib``"
msgstr "ライブラリとして：通常のJARとしてクラスパス上に置く。Webアプリの場合は``WEB-INF/lib``に入れる。"


# 88c4adda869c47ac858bb45dcab5bebc
#: ../../intro/deployment-scenarios.rst:15
msgid ""
"As a stand alone application by instantiating ActorSystem in a main class or "
"using the :ref:`microkernel`"
msgstr "mainクラスまたは :ref:`マイクロカーネル<microkernel>` のアクターシステムの導入によるスタンドアローンアプリケーションとして"

# ab6f24b291e645aa9502c58209e2788b
#: ../../intro/deployment-scenarios.rst:20
msgid "Using Akka as library"
msgstr "ライブラリとしてAkkaを使用する"

# b50b1a73f84547c78444e4f234b4efe3
#: ../../intro/deployment-scenarios.rst:22
msgid ""
"This is most likely what you want if you are building Web applications. "
"There are several ways you can use Akka in Library mode by adding more and "
"more modules to the stack."
msgstr "Webアプリケーションを構築する場合は多分この方法がよいでしょう。ライブラリモードではスタックにどんどんモジュールを追加することにより、Akkaの色々な機能を使用することができます。"


# 95ef0a15e19f428bb839af491b75ab89
#: ../../intro/deployment-scenarios.rst:28
msgid "Using Akka as a stand alone microkernel"
msgstr "スタンドアローンマイクロカーネルとしてAkkaを使用する"

# 7cb1b816808847b3ba3109ba82ba735c
#: ../../intro/deployment-scenarios.rst:30
msgid ""
"Akka can also be run as a stand-alone microkernel. See :ref:`microkernel` "
"for more information."
msgstr "Akkaはスタンドアローンのマイクロカーネルとして実行することもできます。詳しくは :ref:`マイクロカーネル<microkernel>` を参照。"

# ab1ba44230344787b4254f4d277bdb1b
#: ../../intro/getting-started.rst:2
msgid "Getting Started"
msgstr "始め方"

# c91a59e4eedf4c06bda3f537c5dde5a4
#: ../../intro/getting-started.rst:4
msgid ""
"The best way to start learning Akka is to try the Getting Started Tutorial, "
"which comes in several flavours depending on you development environment "
"preferences:"
msgstr "Akkaを学び始めるための一番良い方法は、あなたの開発環境の設定に依存するさまざまな例が出てくるチュートリアルを試してみることです："

# 0d4d2300ffe44b37b419749fb295aff8
#: ../../intro/getting-started.rst:8
msgid ":ref:`getting-started-first-java` for Java development, either"
msgstr ":Java開発者向けの :ref:`Javaで始めよう<getting-started-first-java>` 。どちらか"

# 8daecce089e84f0580aabcb84ca65a64
# 91f579e8cd244fbc918cc0641adda519
#: ../../intro/getting-started.rst:10 ../../intro/getting-started.rst:15
msgid "as standalone project, running from the command line,"
msgstr "スタンドアローンプロジェクトは、コマンドラインから実行します。"

# 3d2fc021beb74f59bb8c306376b3c1d9
#: ../../intro/getting-started.rst:11
msgid "or as Maven project and running it from within Maven"
msgstr "MavenプロジェクトはMaven上から実行します。"

# 7eda1f2413e6465ea23008cf46de55ee
#: ../../intro/getting-started.rst:13
msgid ":ref:`getting-started-first-scala` for Scala development, either"
msgstr "Scala開発者向けの :ref:`Scalaで始めよう<getting-started-first-scala>` 。どちらか"

# e434a2e8ae0d42b48f1c2cb89f1a8cc8
#: ../../intro/getting-started.rst:16
msgid "or as SBT (Simple Build Tool) project and running it from within SBT"
msgstr "SBT(シンプルビルドツール)プロジェクトはSBT上から実行します。"

# f200bc9a674541638f00014ee4092847
#: ../../intro/getting-started.rst:18
msgid ""
"The Getting Started Tutorial describes everything you need to get going, and "
"you don't need to read the rest of this page if you study the tutorial. For "
"later look back reference this page describes the essential parts for "
"getting started with different development environments."
msgstr ""

# 091c9472cccf4330979bf1ae9ecac6d8
# 9ed9bdc9c17444309b0fea5ba993941b
# dc9cfde19f7f4f96a145bea7d7460019
#: ../../intro/getting-started.rst:24
#: ../../intro/getting-started-first-java.rst:49
#: ../../intro/getting-started-first-scala.rst:67
msgid "Prerequisites"
msgstr "必要条件"

# e1a7f74fab7c400a9bb8d8ad4b6689e5
#: ../../intro/getting-started.rst:26
msgid ""
"Akka requires that you have `Java 1.6 <http://www.oracle.com/technetwork/"
"java/javase/downloads/index.html>`_ or later installed on you machine."
msgstr "Akkaは `Java 1.6 <http://www.oracle.com/technetwork/java/javase/downloads/index.html>`_ 以上をインストールしておく必要があります。"

# 074be6f7d65a4a918b31bfaebdd69811
#: ../../intro/getting-started.rst:30
msgid "Download"
msgstr "ダウンロード"

# 22b1d143037d46e483ccb816639f9cf6
#: ../../intro/getting-started.rst:32
msgid ""
"There are several ways to download Akka. You can download the full "
"distribution with microkernel, which includes all modules. Or you can use a "
"build tool like Maven or sbt to download dependencies from the Akka Maven "
"repository."
msgstr ""

# cc669dd96a564ceb9b1ccaf055687824
#: ../../intro/getting-started.rst:37
msgid "Modules"
msgstr "モジュール"

# 7a799a4bcfa34e9293cc07f1db9793ac
#: ../../intro/getting-started.rst:39
msgid ""
"Akka is very modular and has many JARs for containing different features."
msgstr "Akkaは異なる機能が含まれるJARファイル群によるモジュール構造となっています。"

# e3dd04eaa8174c14852d95f8ca3c6c5e
#: ../../intro/getting-started.rst:41
msgid ""
"``akka-actor-2.0-SNAPSHOT.jar`` -- Standard Actors, Typed Actors and much "
"more"
msgstr "``akka-actor-2.0-SNAPSHOT.jar`` -- 標準アクタ、型アクタ、など"

# b4d9801e4f2a4796a267022dcd81bfb8
#: ../../intro/getting-started.rst:42
msgid "``akka-remote-2.0-SNAPSHOT.jar`` -- Remote Actors"
msgstr "``akka-remote-2.0-SNAPSHOT.jar`` -- リモートアクタ"

# 0828607905aa4db58a711869a79f5716
#: ../../intro/getting-started.rst:43
msgid "``akka-slf4j-2.0-SNAPSHOT.jar`` -- SLF4J Event Handler Listener"
msgstr "``akka-slf4j-2.0-SNAPSHOT.jar`` -- SLF4Jイベントハンドラ・リスナ"

# d1ea73d73206466e9630fe2584820c06
#: ../../intro/getting-started.rst:44
msgid "``akka-testkit-2.0-SNAPSHOT.jar`` -- Toolkit for testing Actors"
msgstr "``akka-testkit-2.0-SNAPSHOT.jar`` -- アクタをテストするためのツールキット"

# 30a1398d7c7a4ab1b9c8a15dcf5bfcb5
#: ../../intro/getting-started.rst:45
msgid ""
"``akka-kernel-2.0-SNAPSHOT.jar`` -- Akka microkernel for running a bare-"
"bones mini application server"
msgstr "``akka-kernel-2.0-SNAPSHOT.jar`` -- 実行するために必要最小限なミニアプリケーションサーバによる Akka マイクロカーネル"

# 2345ab1c5edb49c8a3cc6085f2466573
#: ../../intro/getting-started.rst:46
msgid ""
"``akka-<storage-system>-mailbox-2.0-SNAPSHOT.jar`` -- Akka durable mailboxes"
msgstr "``akka-<storage-system>-mailbox-2.0-SNAPSHOT.jar`` -- Akka 対障害性メールボックス"

# 87038c7ef42743cf937397b9ce862193
#: ../../intro/getting-started.rst:48
msgid ""
"How to see the JARs dependencies of each Akka module is described in the :"
"ref:`dependencies` section. Worth noting is that ``akka-actor`` has zero "
"external dependencies (apart from the ``scala-library.jar`` JAR)."
msgstr "それぞれのAkkaモジュールのJARファイル依存性については :ref:`依存性<dependencies>` セクションを参照してください。（途中）"

# dff0b43bd35c4b088ff69bc65b87b22b
#: ../../intro/getting-started.rst:53
msgid "Using a release distribution"
msgstr "リリース版を使用する"

# 2ac49e9c354e4674a7fb8fdc7ef3619a
#: ../../intro/getting-started.rst:55
msgid ""
"Download the release you need from http://akka.io/downloads and unzip it."
msgstr "http://akka.io/downloads にてダウンロードし、ZIPファイルを展開します。"

# 924b4e85d2f64a4cb196197974a2b71c
#: ../../intro/getting-started.rst:58
msgid "Using a snapshot version"
msgstr "スナップショット版を使用する。"

# 0218a03c2c024ad3bcebfa9953e97f1b
#: ../../intro/getting-started.rst:60
msgid ""
"The Akka nightly snapshots are published to http://akka.io/snapshots/ and "
"are versioned with both ``SNAPSHOT`` and timestamps. You can choose a "
"timestamped version to work with and can decide when to update to a newer "
"version. The Akka snapshots repository is also proxied through http://repo."
"typesafe.com/typesafe/snapshots/ which includes proxies for several other "
"repositories that Akka modules depend on."
msgstr ""

# 1683a350f21e42338a4f2a315b5ba53c
#: ../../intro/getting-started.rst:67
msgid "Microkernel"
msgstr "マイクロカーネル"

# af007f9cb2334bd18153e1da86a81015
#: ../../intro/getting-started.rst:69
msgid ""
"The Akka distribution includes the microkernel. To run the microkernel put "
"your application jar in the ``deploy`` directory and use the scripts in the "
"``bin`` directory."
msgstr ""

# d07f49baec4a49458bc3f9c493074f60
#: ../../intro/getting-started.rst:73
msgid ""
"More information is available in the documentation of the :ref:`microkernel`."
msgstr "詳細は、 :ref:`マイクロカーネル<microkernel>` を参照ください。"

# fb061112abdc4621a76da3e817561179
#: ../../intro/getting-started.rst:76
msgid "Using a build tool"
msgstr "ビルドツールを使用する"

# 48d426028e964302a03adb91cf5ceffc
#: ../../intro/getting-started.rst:78
msgid ""
"Akka can be used with build tools that support Maven repositories. The Akka "
"Maven repository can be found at http://akka.io/realeses/ and Typesafe "
"provides http://repo.typesafe.com/typesafe/releases/ that proxies several "
"other repositories, including akka.io."
msgstr ""

# 1490adc6728f41a795a11ea47314afc9
#: ../../intro/getting-started.rst:84
msgid "Using Akka with Maven"
msgstr "MavenにてAkkaを使用する"

# dc332bd471c34fc8bbb55c7b3c773cf2
#: ../../intro/getting-started.rst:86
msgid ""
"Information about how to use Akka with Maven, including how to create an "
"Akka Maven project from scratch, can be found in the :ref:`getting-started-"
"first-java`."
msgstr ""

# def14d3491054176b610e2294fd7c454
#: ../../intro/getting-started.rst:90
msgid "Summary of the essential parts for using Akka with Maven:"
msgstr "MavenにてAkkaを使用するための主要部分の概要"

# d5aebf63fb254cc6b3312ebfd76c409f
#: ../../intro/getting-started.rst:92
msgid "Add this repository to your ``pom.xml``:"
msgstr " ``pom.xml`` に次のリポジトリを追加します。："

# fae3264efb1e42378c69be9234115e0a
#: ../../intro/getting-started.rst:102
msgid ""
"Add the Akka dependencies. For example, here is the dependency for Akka "
"Actor 2.0-SNAPSHOT:"
msgstr ""

# 07c62529f2a04ba8b94cce5afcb632de
#: ../../intro/getting-started.rst:112
msgid ""
"**Note**: for snapshot versions both ``SNAPSHOT`` and timestamped versions "
"are published."
msgstr ""

# 1de90ba387fa4afcae51667ee6460e9b
#: ../../intro/getting-started.rst:116
msgid "Using Akka with SBT"
msgstr "SBTでAkkaを使用する"

# 5baf8aa2b4144bffad0d34ed160fd0e6
#: ../../intro/getting-started.rst:118
msgid ""
"Information about how to use Akka with SBT, including how to create an Akka "
"SBT project from scratch, can be found in the :ref:`getting-started-first-"
"scala`."
msgstr ""

# 8259ad71a1104939831fde6829736b2d
#: ../../intro/getting-started.rst:121
msgid "Summary of the essential parts for using Akka with SBT:"
msgstr ""

# 01bad2d8d55d46d9a471b28365c919d2
#: ../../intro/getting-started.rst:123
msgid ""
"SBT installation instructions on `https://github.com/harrah/xsbt/wiki/Setup "
"<https://github.com/harrah/xsbt/wiki/Setup>`_"
msgstr ""

# 4b1192f0f26847f7a54f1e4945341de0
#: ../../intro/getting-started.rst:125
msgid "``build.sbt`` file::"
msgstr ""

# 5299628142024c1c95e01ef18314a8df
#: ../../intro/getting-started.rst:139
msgid "Using Akka with Eclipse"
msgstr "EclipseでAkkaを使用する"

# 759412e66519403094cc6d97a4d5977c
#: ../../intro/getting-started.rst:141
msgid ""
"Setup SBT project and then use `sbteclipse <https://github.com/typesafehub/"
"sbteclipse>`_ to generate Eclipse project."
msgstr ""

# 0b7536becd324f83a32e35657a32e45b
#: ../../intro/getting-started.rst:144
msgid "Using Akka with IntelliJ IDEA"
msgstr "IntelliJ IDEAでAkkaを使用する"

# a34983660efe410a9a18801008b150ce
#: ../../intro/getting-started.rst:146
msgid ""
"Setup SBT project and then use `sbt-idea <https://github.com/mpeltonen/sbt-"
"idea>`_ to generate IntelliJ IDEA project."
msgstr ""

# 182d1ecffb8640e38a59b23b3c410f54
#: ../../intro/getting-started.rst:149
msgid "Build from sources"
msgstr "ソースからビルド"

# 00568da2d0b849c2b7cf999325e1a5b5
#: ../../intro/getting-started.rst:151
msgid "Akka uses Git and is hosted at `Github <http://github.com>`_."
msgstr ""

# 6315e02dfa7b4c89a8cb12d8bda699c0
#: ../../intro/getting-started.rst:153
msgid "Akka: clone the Akka repository from `<http://github.com/akka/akka>`_"
msgstr ""

# 3381138b935e4b979c0e0d9c039e2e0a
#: ../../intro/getting-started.rst:155
msgid "Continue reading the page on :ref:`building-akka`"
msgstr ""

# bc1f9fc837084524ba4142521c75a4a3
#: ../../intro/getting-started.rst:158
msgid "Need help?"
msgstr ""

# 8a44e8af986b4a5b8385ece647a56817
#: ../../intro/getting-started.rst:160
msgid ""
"If you have questions you can get help on the `Akka Mailing List <http://"
"groups.google.com/group/akka-user>`_."
msgstr ""

# 5afaff8173384ecebc17d9af8e122594
#: ../../intro/getting-started.rst:162
msgid "You can also ask for `commercial support <http://typesafe.com>`_."
msgstr ""

# 49b3fb3ca55f4b0aafd4463fdc30f78c
#: ../../intro/getting-started.rst:164
msgid "Thanks for being a part of the Akka community."
msgstr ""

# 15ea9cef18c342028b835e95a900ff54
#: ../../intro/getting-started-first-java.rst:4
msgid "Getting Started Tutorial (Java): First Chapter"
msgstr ""

# ed3554381b5a4e3496a2b94a24f7d071
# e68eb053b8d04f3b9720d4533e8e61d9
# 96b10cdcb2a94f3f85cce1e5183dc4fc
#: ../../intro/getting-started-first-java.rst:7
#: ../../intro/getting-started-first-scala.rst:10 ../../intro/index.rst:2
msgid "Introduction"
msgstr ""

# c1c4377fa68847a0ae4b3da0f32fbceb
#: ../../intro/getting-started-first-java.rst:9
msgid ""
"Welcome to the first tutorial on how to get started with `Akka <http://akka."
"io>`_ and Java. We assume that you already know what Akka and Java are and "
"will now focus on the steps necessary to start your first project."
msgstr ""

# 31081b0f2b344c64a8aac21b59aca0f2
# 3966239fbe2d4b53b5f587cf02340102
#: ../../intro/getting-started-first-java.rst:11
#: ../../intro/getting-started-first-scala.rst:16
msgid "There are two variations of this first tutorial:"
msgstr ""

# de2643ba7fc64f4886045320ce9d81ab
# 1acec8df458a4cb08cc57a47f22bc363
#: ../../intro/getting-started-first-java.rst:13
#: ../../intro/getting-started-first-scala.rst:18
msgid "creating a standalone project and run it from the command line"
msgstr ""

# 6904de30ee9c4ff790965ebe9a752162
#: ../../intro/getting-started-first-java.rst:14
msgid "creating a Maven project and running it from within Maven"
msgstr ""

# b45bbf292317413485f37c9f5bb6b4e1
# 3fa7f203a1784ac280ec5241245d306b
#: ../../intro/getting-started-first-java.rst:16
#: ../../intro/getting-started-first-scala.rst:21
msgid "Since they are so similar we will present them both."
msgstr ""

# 0fc8a74e453a4c9286a783142a6e95a6
# 1c4af61b9b2a4a0c9acdc75987266956
#: ../../intro/getting-started-first-java.rst:18
#: ../../intro/getting-started-first-scala.rst:23
msgid ""
"The sample application that we will create is using actors to calculate the "
"value of Pi. Calculating Pi is a CPU intensive operation and we will utilize "
"Akka Actors to write a concurrent solution that scales out to multi-core "
"processors. This sample will be extended in future tutorials to use Akka "
"Remote Actors to scale out on multiple machines in a cluster."
msgstr ""

# ea30b871bb0d4fea96b0217e8e9205ac
# 577cb2aa99634a129dfb127f7e2e0dd5
#: ../../intro/getting-started-first-java.rst:20
#: ../../intro/getting-started-first-scala.rst:29
msgid ""
"We will be using an algorithm that is called \"embarrassingly parallel\" "
"which just means that each job is completely isolated and not coupled with "
"any other job. Since this algorithm is so parallelizable it suits the actor "
"model very well."
msgstr ""

# 8f9813912b734524a94d026d6c498f83
# 2711b402995b4bd09c576435d6fbfd64
#: ../../intro/getting-started-first-java.rst:22
#: ../../intro/getting-started-first-scala.rst:34
msgid "Here is the formula for the algorithm we will use:"
msgstr ""

# 76bcfe01561c46d8b0499071352bb7ce
# c920f5d4ed484a37ba4b541300c0938a
#: ../../intro/getting-started-first-java.rst:26
#: ../../intro/getting-started-first-scala.rst:38
msgid ""
"In this particular algorithm the master splits the series into chunks which "
"are sent out to each worker actor to be processed. When each worker has "
"processed its chunk it sends a result back to the master which aggregates "
"the total result."
msgstr ""

# 05a11f48d2bd452897a17d38f2a6a089
# c4455d5a136748a98d525053e6c71bd9
#: ../../intro/getting-started-first-java.rst:29
#: ../../intro/getting-started-first-scala.rst:44
msgid "Tutorial source code"
msgstr ""

# 3091afbcdf48417e9912219055fbf8b8
#: ../../intro/getting-started-first-java.rst:31
msgid ""
"If you want don't want to type in the code and/or set up a Maven project "
"then you can check out the full tutorial from the Akka GitHub repository. It "
"is in the ``akka-tutorials/akka-tutorial-first`` module. You can also browse "
"it online `here`__, with the actual source code `here`__."
msgstr ""

# b5a9591383614f449b4863f812f8f057
# 6db2ba598c38472c97f038dbcf24e452
#: ../../intro/getting-started-first-java.rst:36
#: ../../intro/getting-started-first-scala.rst:54
msgid ""
"To check out the code using Git invoke the following command and you can "
"then you can navigate down to the tutorial."
msgstr ""

# 75afa946749f4ad69531f310e019fadf
# 6d97b28add1c46d9af0ea239fdf26cb2
# d4fd8082fc30481990c32c6ea8a05a00
# 97da62bcfbf04ff78f28e4902ac1b43d
# bb2c6c1779794d09b0b81f785ee6996f
# 23dd178f99a340d3925808247abcf7f0
# 7faa0531ff2946dcab30b518d3ebc5bc
# f552325e70a94e49a762ccf60c89be4d
# ba09ccfba73845d78d2b5bba1f05af46
# b9a66fcbf72d42c2a756ccd72e6a34c1
# 56eb381d32be4391a64f04c0139f9d7a
# a39153d08e494b66b980bf9862a82ade
# 870b1e50784e424da4662a8f58d7b2c5
# d8e24730cd5c448eb21c06468e74ebb2
# f9739443056a4079b57355ac0aa0714a
# 41e088bb0c984193a9886c32811bd547
# fbe462848fa1452890dc3e8a50de8103
# 2b199d43871842549efaf5ce5f876c60
# 87aafefa954c47d19c5c8c99354d2d00
#: ../../intro/getting-started-first-java.rst:38
#: ../../intro/getting-started-first-java.rst:57
#: ../../intro/getting-started-first-java.rst:99
#: ../../intro/getting-started-first-java.rst:115
#: ../../intro/getting-started-first-java.rst:184
#: ../../intro/getting-started-first-java.rst:202
#: ../../intro/getting-started-first-java.rst:423
#: ../../intro/getting-started-first-java.rst:438
#: ../../intro/getting-started-first-java.rst:463
#: ../../intro/getting-started-first-java.rst:473
#: ../../intro/getting-started-first-scala.rst:56
#: ../../intro/getting-started-first-scala.rst:78
#: ../../intro/getting-started-first-scala.rst:120
#: ../../intro/getting-started-first-scala.rst:136
#: ../../intro/getting-started-first-scala.rst:206
#: ../../intro/getting-started-first-scala.rst:216
#: ../../intro/getting-started-first-scala.rst:460
#: ../../intro/getting-started-first-scala.rst:474
#: ../../intro/getting-started-first-scala.rst:500
msgid "On Linux/Unix/Mac systems::"
msgstr ""

# 371ea347f24e4514a368c066fcddb7db
# bcaac016ba2841488fc7bcf78bf4386e
# a41f445f47af487881ce04236033498e
# 30cd838465414f71ad4bf9903fc281f5
# e808bc0b82594923a902ad8e8a01a0cf
# 0761a9d5c3aa4be6b1fb4e5fa69fa05e
# 44faaaf6e4d44576bb980cc1ba250e3e
# e14551d02dfa4f30b2a82037b61b0744
# b997d50cd46c4a48b9db28c277f2bf42
# b4e1edd1a3c4481b9c724a9d02c3abea
# 2716ae3ceb9540bda743803faeb6eb31
# 3b8d320987d346759b2769ecb091e425
# 433faea0bfa1451cad5872e96e9b79a3
# 28bf2d16a8ec48e099df4390cd375b65
# 2ad4ff61a0494d6c99c542f133d70b03
# 50e16668be0d4a62bbc3c286713547d5
# a6cde83865454bcf935ea21935e80796
# eccb79e3e44d4b0f9a6e899c664b4092
# 9f09940da4de4d2e8086ef8f8d8c0be7
#: ../../intro/getting-started-first-java.rst:43
#: ../../intro/getting-started-first-java.rst:69
#: ../../intro/getting-started-first-java.rst:106
#: ../../intro/getting-started-first-java.rst:125
#: ../../intro/getting-started-first-java.rst:192
#: ../../intro/getting-started-first-java.rst:206
#: ../../intro/getting-started-first-java.rst:427
#: ../../intro/getting-started-first-java.rst:447
#: ../../intro/getting-started-first-java.rst:467
#: ../../intro/getting-started-first-java.rst:480
#: ../../intro/getting-started-first-scala.rst:61
#: ../../intro/getting-started-first-scala.rst:90
#: ../../intro/getting-started-first-scala.rst:127
#: ../../intro/getting-started-first-scala.rst:146
#: ../../intro/getting-started-first-scala.rst:210
#: ../../intro/getting-started-first-scala.rst:221
#: ../../intro/getting-started-first-scala.rst:464
#: ../../intro/getting-started-first-scala.rst:483
#: ../../intro/getting-started-first-scala.rst:506
msgid "On Windows systems::"
msgstr ""

# d29abb9647b944c0821a2105a586e654
#: ../../intro/getting-started-first-java.rst:51
msgid ""
"This tutorial assumes that you have Java 1.6 or later installed on you "
"machine and ``java`` on your ``PATH``. You also need to know how to run "
"commands in a shell (ZSH, Bash, DOS etc.) and a decent text editor or IDE to "
"type in the Java code."
msgstr ""

# 8e7c714fad764b49868e0a2d072323a9
# 3eece56a8d6a476bb33953f5ae6aabf7
#: ../../intro/getting-started-first-java.rst:53
#: ../../intro/getting-started-first-scala.rst:74
msgid ""
"You need to make sure that ``$JAVA_HOME`` environment variable is set to the "
"root of the Java distribution. You also need to make sure that the ``"
"$JAVA_HOME/bin`` is on your ``PATH``."
msgstr ""

# 6a5aaff3575f48c9ba1566c722a978e4
# aa96809ab39c4db786a5a5c4c4717d4b
# f0dd1d59d0e54fc5b92092895636b7d9
# 56d407418c194074bec9ef69009676ac
#: ../../intro/getting-started-first-java.rst:62
#: ../../intro/getting-started-first-java.rst:74
#: ../../intro/getting-started-first-scala.rst:83
#: ../../intro/getting-started-first-scala.rst:95
msgid "You can test your installation by invoking ``java``::"
msgstr ""

# 4ad01b77020a48049c28d1b6ffb2559b
# a5c0b7744e7441f9839758b296066cc2
#: ../../intro/getting-started-first-java.rst:82
#: ../../intro/getting-started-first-scala.rst:103
msgid "Downloading and installing Akka"
msgstr ""

# 333bb8a9a8eb45d2a4f6a17813c1b263
# bbb71b9e6e9b45af895d67bea3b809bc
#: ../../intro/getting-started-first-java.rst:84
#: ../../intro/getting-started-first-scala.rst:105
msgid ""
"To build and run the tutorial sample from the command line, you have to "
"download Akka. If you prefer to use SBT to build and run the sample then you "
"can skip this section and jump to the next one."
msgstr ""

# 998265f413df46f7975daf0fa219c16b
# 6ae374906c974f398eba838c3bfa4989
#: ../../intro/getting-started-first-java.rst:88
#: ../../intro/getting-started-first-scala.rst:109
msgid ""
"Let's get the ``akka-2.0-SNAPSHOT.zip`` distribution of Akka from http://"
"akka.io/downloads/ which includes everything we need for this tutorial. Once "
"you have downloaded the distribution unzip it in the folder you would like "
"to have Akka installed in. In my case I choose to install it in ``/Users/"
"jboner/tools/``, simply by unzipping it to this directory."
msgstr ""

# f3b280261c1542cdba0cca21705ee9bb
# 6ea6991edba74c48b16e558017e9feb8
#: ../../intro/getting-started-first-java.rst:94
#: ../../intro/getting-started-first-scala.rst:115
msgid ""
"You need to do one more thing in order to install Akka properly: set the "
"``AKKA_HOME`` environment variable to the root of the distribution. In my "
"case I'm opening up a shell, navigating down to the distribution, and "
"setting the ``AKKA_HOME`` variable."
msgstr ""

# a7116953b4b747fd96cc205231860d99
# df972f286c6b420e83fb0ef6bd4fff51
#: ../../intro/getting-started-first-java.rst:113
#: ../../intro/getting-started-first-scala.rst:134
msgid "The distribution looks like this."
msgstr ""

# 9aed677971ae4eec8af45f13bb322ac7
# 009cb42c56514f93aaf9b9012c3ca66f
#: ../../intro/getting-started-first-java.rst:135
#: ../../intro/getting-started-first-scala.rst:156
msgid ""
"In the ``bin`` directory we have scripts for starting the Akka Microkernel."
msgstr ""

# 2033e166c75c4688bca0dc6574c44923
# 43e64ab3ee774dbcb67e5ab121d76e09
#: ../../intro/getting-started-first-java.rst:136
#: ../../intro/getting-started-first-scala.rst:157
msgid "In the ``config`` directory we have the Akka conf files."
msgstr ""

# 13c6abad07ec4c7f9051cf69c60cd061
# d68a219a6bf64bb988c83c929a536b40
#: ../../intro/getting-started-first-java.rst:137
#: ../../intro/getting-started-first-scala.rst:158
msgid ""
"In the ``deploy`` directory we can place applications to be run with the "
"microkernel."
msgstr ""

# 3cd5693a55b743fa912c3f60a621947d
# c334a4d9bb344e68834f2aee8871c722
#: ../../intro/getting-started-first-java.rst:138
#: ../../intro/getting-started-first-scala.rst:159
msgid "In the ``doc`` directory we have the documentation, API, and doc JARs."
msgstr ""

# 22e1e883ed2649279103286725404a69
# c14b136790904bd3906166ebc7c24539
#: ../../intro/getting-started-first-java.rst:139
#: ../../intro/getting-started-first-scala.rst:160
msgid "In the ``lib`` directory we have the Scala and Akka JARs."
msgstr ""

# 069ff2c9b2e441499d1addaf25269cc4
# b0afc94adfee4319a766696499c728e9
#: ../../intro/getting-started-first-java.rst:140
#: ../../intro/getting-started-first-scala.rst:161
msgid "In the ``src`` directory we have the source JARs for Akka."
msgstr ""

# 567c372dac58476b878e6c1747b23aad
# fca66036af1b45afa40c0082e0e87f74
#: ../../intro/getting-started-first-java.rst:142
#: ../../intro/getting-started-first-scala.rst:163
msgid ""
"The only JAR we will need for this tutorial (apart from the ``scala-library."
"jar`` JAR) is the ``akka-actor-2.0-SNAPSHOT.jar`` JAR in the ``lib/akka`` "
"directory. This is a self-contained JAR with zero dependencies and contains "
"everything we need to write a system using Actors."
msgstr ""

# 31d562f77ae04bf3965547ccac1aac5b
# 0f7063fb530347059bb4e344a2c1d979
#: ../../intro/getting-started-first-java.rst:147
#: ../../intro/getting-started-first-scala.rst:168
msgid ""
"Akka is very modular and has many JARs for containing different features. "
"The modules are:"
msgstr ""

# 1b2867126edd43819017fe751efc9208
# 32a3cf033d6f422a8ad5af23ebaec0eb
#: ../../intro/getting-started-first-java.rst:150
#: ../../intro/getting-started-first-scala.rst:171
msgid "``akka-actor`` -- Actors"
msgstr ""

# b8aeee7213cd43109ec45a09c97abf9e
# 796b7a5097404da080cefec7b2917d7e
#: ../../intro/getting-started-first-java.rst:152
#: ../../intro/getting-started-first-scala.rst:173
msgid "``akka-remote`` -- Remote Actors"
msgstr ""

# d04fb9310b8b43028f1234df81523ba3
# 7bf76ecc9dbe4150955bfb9e407a7b87
#: ../../intro/getting-started-first-java.rst:154
#: ../../intro/getting-started-first-scala.rst:175
msgid "``akka-slf4j`` -- SLF4J Event Handler Listener for logging with SLF4J"
msgstr ""

# 777d0c93dbe742efa09f704d3bebb04c
# 5d432a18b7b44b679682fdd4e88c1b16
#: ../../intro/getting-started-first-java.rst:156
#: ../../intro/getting-started-first-scala.rst:177
msgid "``akka-testkit`` -- Toolkit for testing Actors"
msgstr ""

# c5264ab5395d419dbb277e92754d99ac
# ca76acda4e114578848ed95776db4b3e
#: ../../intro/getting-started-first-java.rst:158
#: ../../intro/getting-started-first-scala.rst:179
msgid ""
"``akka-kernel`` -- Akka microkernel for running a bare-bones mini "
"application server"
msgstr ""

# 952eb973cfdd4652a89fd5d0c7487f28
#: ../../intro/getting-started-first-java.rst:160
msgid ""
"``akka-durable-mailboxes`` -- Durable mailboxes: file-based, MongoDB, Redis, "
"Beanstalk and Zookeeper"
msgstr ""

# b534a212eb4549c1b7564a2db5aa9826
#: ../../intro/getting-started-first-java.rst:171
msgid "Downloading and installing Maven"
msgstr ""

# 602319ae0875473386fda2df398f0516
#: ../../intro/getting-started-first-java.rst:173
msgid ""
"Maven is an excellent build system that can be used to build both Java and "
"Scala projects. If you want to use Maven for this tutorial then follow the "
"following instructions, if not you can skip this section and the next."
msgstr ""

# 5fedc887052b4a5aa0acc96181bb82f7
#: ../../intro/getting-started-first-java.rst:175
msgid ""
"First browse to `http://maven.apache.org/download.html <http://maven.apache."
"org/download.html>`_ and download the ``3.0.3`` distribution."
msgstr ""

# ef3bba30955e426480353968632c722c
#: ../../intro/getting-started-first-java.rst:177
msgid ""
"To install Maven it is easiest to follow the instructions on `http://maven."
"apache.org/download.html#Installation <http://maven.apache.org/download."
"html#Installation>`_."
msgstr ""

# a683806fff674b1f894c9377207c6845
#: ../../intro/getting-started-first-java.rst:180
msgid "Creating an Akka Maven project"
msgstr ""

# 1e685c1376374eb996e6309bd4ed3118
#: ../../intro/getting-started-first-java.rst:182
msgid ""
"If you have not already done so, now is the time to create a Maven project "
"for our tutorial. You do that by stepping into the directory you want to "
"create your project in and invoking the ``mvn`` command."
msgstr ""

# 07436b81b0b34a41821e1357e16cf993
#: ../../intro/getting-started-first-java.rst:200
msgid ""
"Now we have the basis for our Maven-based Akka project. Let's step into the "
"project directory."
msgstr ""

# fd43173b8fd847658c199e986bae6312
#: ../../intro/getting-started-first-java.rst:210
msgid "Here is the layout that Maven created::"
msgstr ""

# 9972e86cc6a84e789e4ea3d231b07301
#: ../../intro/getting-started-first-java.rst:223
msgid ""
"As you can see we already have a Java source file called ``App.java``, let's "
"now rename it to ``Pi.java``."
msgstr ""

# b9e79a121eb0456bbb92ec43d75fdfed
#: ../../intro/getting-started-first-java.rst:225
msgid ""
"We also need to edit the ``pom.xml`` build file. Let's add the dependency we "
"need as well as the Maven repository it should download it from. The Akka "
"Maven repository can be found at http://akka.io/releases/ and Typesafe "
"provides http://repo.typesafe.com/typesafe/releases/ that proxies several "
"other repositories, including akka.io.  It should now look something like "
"this:"
msgstr ""

# 604eee46c5114d99b0dce0556ebb0729
# 8eb46dd9bd794333b967876b9540f6fd
#: ../../intro/getting-started-first-java.rst:279
#: ../../intro/getting-started-first-scala.rst:291
msgid "Start writing the code"
msgstr ""

# 13c45e1c2c0043938a83ccd00ffa4379
# d3d42becd7ae410eb8075b93198a9d6d
#: ../../intro/getting-started-first-java.rst:281
#: ../../intro/getting-started-first-scala.rst:293
msgid "Now it's about time to start hacking."
msgstr ""

# dfd3a340f2074621a03797a5228e0b7f
#: ../../intro/getting-started-first-java.rst:283
msgid ""
"We start by creating a ``Pi.java`` file and adding these import statements "
"at the top of the file:"
msgstr ""

# 3092d83f501c49c3802ef78375822b36
#: ../../intro/getting-started-first-java.rst:287
msgid ""
"If you are using Maven in this tutorial then create the file in the ``src/"
"main/java/akka/tutorial/first/java`` directory."
msgstr ""

# 20d96e142f4c47ebaf173ecd83ca3b84
#: ../../intro/getting-started-first-java.rst:289
msgid ""
"If you are using the command line tools then create the file wherever you "
"want. We will create it in a directory called ``tutorial`` at the root of "
"the Akka distribution, e.g. in ``$AKKA_HOME/tutorial/akka/tutorial/first/"
"java/Pi.java``."
msgstr ""

# c6d12b7352ef4cc58f4c15586b7708d6
# 298212207509414086f7ff935b36e1b8
#: ../../intro/getting-started-first-java.rst:294
#: ../../intro/getting-started-first-scala.rst:309
msgid "Creating the messages"
msgstr ""

# 6f74be086c534c8782639275933a0e10
# 72481cdea98c4a1f918de00e293908f0
#: ../../intro/getting-started-first-java.rst:296
#: ../../intro/getting-started-first-scala.rst:311
msgid ""
"The design we are aiming for is to have one ``Master`` actor initiating the "
"computation, creating a set of ``Worker`` actors. Then it splits up the work "
"into discrete chunks, and sends these chunks to the different workers in a "
"round-robin fashion. The master waits until all the workers have completed "
"their work and sent back results for aggregation. When computation is "
"completed the master sends the result to the ``Listener``, which prints out "
"the result."
msgstr ""

# 82298d37ae194b12a70bc16379b87f5d
# bd7f0df33f79467097f945f788c340d5
#: ../../intro/getting-started-first-java.rst:303
#: ../../intro/getting-started-first-scala.rst:318
msgid ""
"With this in mind, let's now create the messages that we want to have "
"flowing in the system. We need four different messages:"
msgstr ""

# 89fb1c08816d4f4781489e6b732621d3
# d4f0f38f2e494626808edb9d2080275c
#: ../../intro/getting-started-first-java.rst:306
#: ../../intro/getting-started-first-scala.rst:321
msgid "``Calculate`` -- sent to the ``Master`` actor to start the calculation"
msgstr ""

# 8296c54ab42a445886fe08fc6f9357e1
# 84cddf9834fb49eb852221fbeb397a94
#: ../../intro/getting-started-first-java.rst:307
#: ../../intro/getting-started-first-scala.rst:322
msgid ""
"``Work`` -- sent from the ``Master`` actor to the ``Worker`` actors "
"containing the work assignment"
msgstr ""

# 62ad809725944f428e586f88ac358c09
# d675bf7f5b16465199bb590af28aea21
#: ../../intro/getting-started-first-java.rst:309
#: ../../intro/getting-started-first-scala.rst:324
msgid ""
"``Result`` -- sent from the ``Worker`` actors to the ``Master`` actor "
"containing the result from the worker's calculation"
msgstr ""

# 1e1a6630a95741078b4adc0e004a442e
# 27689a5d4d464fd8a02dc6c6b97ef046
#: ../../intro/getting-started-first-java.rst:311
#: ../../intro/getting-started-first-scala.rst:326
msgid ""
"``PiApproximation`` -- sent from the ``Master`` actor to the ``Listener`` "
"actor containing the the final pi result and how long time the calculation "
"took"
msgstr ""

# b0807872e8fc4d8980ca24997ac10130
#: ../../intro/getting-started-first-java.rst:315
msgid ""
"Messages sent to actors should always be immutable to avoid sharing mutable "
"state. So let's start by creating three messages as immutable POJOs. We also "
"create a wrapper ``Pi`` class to hold our implementation:"
msgstr ""

# d652c16e7f524cab9771b74c45f43793
# 43213236c5314bd6ba06dfd86aacbe9e
#: ../../intro/getting-started-first-java.rst:320
#: ../../intro/getting-started-first-scala.rst:340
msgid "Creating the worker"
msgstr ""

# 503a4ee3ba2a465e8eec201e015df074
#: ../../intro/getting-started-first-java.rst:322
msgid ""
"Now we can create the worker actor.  This is done by extending in the "
"``UntypedActor`` base class and defining the ``onReceive`` method. The "
"``onReceive`` method defines our message handler. We expect it to be able to "
"handle the ``Work`` message so we need to add a handler for this message:"
msgstr ""

# b382774b8c3b4086b49a20b1720cba61
#: ../../intro/getting-started-first-java.rst:327
msgid ""
"As you can see we have now created an ``UntypedActor`` with a ``onReceive`` "
"method as a handler for the ``Work`` message. In this handler we invoke the "
"``calculatePiFor(..)`` method, wrap the result in a ``Result`` message and "
"send it back to the original sender using ``getContext().reply(..)``. In "
"Akka the sender reference is implicitly passed along with the message so "
"that the receiver can always reply or store away the sender reference for "
"future use."
msgstr ""

# cb7e5a6c74ae4e02bf624dc4ace89e0e
#: ../../intro/getting-started-first-java.rst:329
msgid ""
"The only thing missing in our ``Worker`` actor is the implementation on the "
"``calculatePiFor(..)`` method:"
msgstr ""

# 6c9aaf988739456e8fc5b94e6b6e59ab
# 0fbdb41cdb61453586548e36c7464e11
#: ../../intro/getting-started-first-java.rst:334
#: ../../intro/getting-started-first-scala.rst:366
msgid "Creating the master"
msgstr ""

# 625c308310204a03ac53cd64846c0d1d
# 5ad5c79d39264928a1509fed6f08a3d4
#: ../../intro/getting-started-first-java.rst:336
#: ../../intro/getting-started-first-scala.rst:368
msgid ""
"The master actor is a little bit more involved. In its constructor we create "
"a round-robin router to make it easier to spread out the work evenly between "
"the workers. Let's do that first:"
msgstr ""

# b645d6db34c64f71864af2c2c5516592
# 7bce884a23ab455997b63e2ee4555221
#: ../../intro/getting-started-first-java.rst:341
#: ../../intro/getting-started-first-scala.rst:373
msgid ""
"Now we have a router that is representing all our workers in a single "
"abstraction. So now let's create the master actor. We pass it three integer "
"variables:"
msgstr ""

# 5dd0ecdfff2f45698e9cc6830f362dd7
# 2ca7617295ae4f05bcf68259c19365d0
#: ../../intro/getting-started-first-java.rst:344
#: ../../intro/getting-started-first-scala.rst:376
msgid "``nrOfWorkers`` -- defining how many workers we should start up"
msgstr ""

# ae46c3b824574428a7ad6165e4cb6d78
# 3003ae4276554b11a9a007df0be37323
#: ../../intro/getting-started-first-java.rst:345
#: ../../intro/getting-started-first-scala.rst:377
msgid ""
"``nrOfMessages`` -- defining how many number chunks to send out to the "
"workers"
msgstr ""

# 4b6aaa34c5f24ce7a03c2564ed18c8d3
# 27485ac9204b4dc482c813d36bbf2a44
#: ../../intro/getting-started-first-java.rst:346
#: ../../intro/getting-started-first-scala.rst:378
msgid ""
"``nrOfElements`` -- defining how big the number chunks sent to each worker "
"should be"
msgstr ""

# 43caf06033364cd49c7644a3250097f7
# 3235e1521aa54bd68b6a81b649a876bf
#: ../../intro/getting-started-first-java.rst:348
#: ../../intro/getting-started-first-scala.rst:380
msgid "Here is the master actor:"
msgstr ""

# e4d53168ab484deab9203918831895c4
# d56f189d1d17453d83e382a3294a0548
#: ../../intro/getting-started-first-java.rst:353
#: ../../intro/getting-started-first-scala.rst:385
msgid "A couple of things are worth explaining further."
msgstr ""

# 83aab9cb9ec4409baca66486a297f7cc
# 0928baca7ef84cf2bc64b787c25fe9cf
#: ../../intro/getting-started-first-java.rst:355
#: ../../intro/getting-started-first-scala.rst:387
msgid ""
"Note that we are passing in a ``ActorRef`` to the ``Master`` actor. This is "
"used to report the the final result to the outside world."
msgstr ""

# 1a662b9af3a340599e82d504e720fc6c
# 320d5ee14e5f44fb9293113f7fe17e7e
#: ../../intro/getting-started-first-java.rst:358
#: ../../intro/getting-started-first-scala.rst:390
msgid ""
"But we are not done yet. We are missing the message handler for the "
"``Master`` actor. This message handler needs to be able to react to two "
"different messages:"
msgstr ""

# be40b564b0ba49ae8f6e861304631cf5
# 6185dd5ff8274092a3acd6cc7a4ad233
#: ../../intro/getting-started-first-java.rst:361
#: ../../intro/getting-started-first-scala.rst:393
msgid "``Calculate`` -- which should start the calculation"
msgstr ""

# c43cdaf1af6e45c69ab0717d42936a41
# 2a6046b3319c4f6491cba81d59ddec73
#: ../../intro/getting-started-first-java.rst:362
#: ../../intro/getting-started-first-scala.rst:394
msgid "``Result`` -- which should aggregate the different results"
msgstr ""

# 63ecd4aa793d4105b9ebd4ddd8b1dc6f
# 983231f4bb294a1e809f6e02eebe8f09
#: ../../intro/getting-started-first-java.rst:364
#: ../../intro/getting-started-first-scala.rst:396
msgid ""
"The ``Calculate`` handler is sending out work to all the ``Worker`` via its "
"router."
msgstr ""

# 05acd241a10741bca8e540485962c61c
#: ../../intro/getting-started-first-java.rst:366
msgid ""
"The ``Result`` handler gets the value from the ``Result`` message and "
"aggregates it to our ``pi`` member variable. We also keep track of how many "
"results we have received back, and if that matches the number of tasks sent "
"out, the ``Master`` actor considers itself done and sends the final result "
"to the ``listener``. When done it also invokes the ``getContext().stop"
"(getSelf())`` method to stop itself *and* all its supervised actors. In this "
"case it has one supervised actor, the router, and this in turn has "
"``nrOfWorkers`` supervised actors. All of them will be stopped automatically "
"as the invocation of any supervisor's ``stop`` method will propagate down to "
"all its supervised 'children'."
msgstr ""

# 9b7cd81a78f84336a00c94d06c92505d
# 0afc6a2bd0e44034b5c4e5baddc96d31
#: ../../intro/getting-started-first-java.rst:376
#: ../../intro/getting-started-first-scala.rst:407
msgid "Let's capture this in code:"
msgstr ""

# 9a93809dc1c3497a8c7061183d09ad8c
# 344988a0212b4aee9f86a6c47bcb8e8a
#: ../../intro/getting-started-first-java.rst:381
#: ../../intro/getting-started-first-scala.rst:413
msgid "Creating the result listener"
msgstr ""

# 8b93a9908e054aa9ac1f75109a0e7a9f
# 6df9baaee827497da97e93b973aea3e5
#: ../../intro/getting-started-first-java.rst:383
#: ../../intro/getting-started-first-scala.rst:415
msgid ""
"The listener is straightforward. When it receives the ``PiApproximation`` "
"from the ``Master`` it prints the result and shuts down the ``ActorSystem``."
msgstr ""

# 8f1d77e9d4d248f4a28940e5453fc23c
# 4e3674a1668741d6a658952731421d08
#: ../../intro/getting-started-first-java.rst:389
#: ../../intro/getting-started-first-scala.rst:421
msgid "Bootstrap the calculation"
msgstr ""

# 5db1c1ba5d934ef1b11d75e4222326e9
#: ../../intro/getting-started-first-java.rst:391
msgid ""
"Now the only thing that is left to implement is the runner that should "
"bootstrap and run the calculation for us. We do that by adding a ``main`` "
"method to the enclosing ``Pi`` class in which we create a new instance of "
"``Pi`` and invoke method ``calculate`` in which we start up the ``Master`` "
"actor and wait for it to finish:"
msgstr ""

# 78a15ed8d52a4ea782b072d263b8c401
#: ../../intro/getting-started-first-java.rst:398
msgid ""
"As you can see the *calculate* method above it creates an ``ActorSystem`` "
"and this is the Akka container which will contain all actors created in that "
"\"context\". An example of how to create actors in the container is the "
"*'system.actorOf(...)'* line in the calculate method. In this case we create "
"two top level actors. If you instead where in an actor context, i.e. inside "
"an actor creating other actors, you should use *getContext().actorOf(...)*. "
"This is illustrated in the Master code above."
msgstr ""

# de2feaf006034719a06d922722b31797
# f10928afd6e14bb19fb668a1cdebbca9
#: ../../intro/getting-started-first-java.rst:404
#: ../../intro/getting-started-first-scala.rst:441
msgid "That's it. Now we are done."
msgstr ""

# 1e4c1a1ec2544a01b16acca4ac4f47a6
#: ../../intro/getting-started-first-java.rst:406
msgid ""
"Before we package it up and run it, let's take a look at the full code now, "
"with package declaration, imports and all:"
msgstr ""

# add8189403fa4db8aad5a488a008b940
# 70bc7180dc554c2090c30248a594b4dd
#: ../../intro/getting-started-first-java.rst:411
#: ../../intro/getting-started-first-scala.rst:450
msgid "Run it as a command line application"
msgstr ""

# 3cecb851990e41f5be97d0d7ad2b29f8
#: ../../intro/getting-started-first-java.rst:413
msgid ""
"If you have not typed in (or copied) the code for the tutorial as ``"
"$AKKA_HOME/tutorial/akka/tutorial/first/java/Pi.java`` then now is the time. "
"When that's done open up a shell and step in to the Akka distribution (``cd "
"$AKKA_HOME``)."
msgstr ""

# 88bfb33f5f83472d9ae4c25e4aeb42c3
#: ../../intro/getting-started-first-java.rst:418
msgid ""
"First we need to compile the source file. That is done with Java's compiler "
"``javac``. Our application depends on the ``akka-actor-2.0-SNAPSHOT.jar`` "
"and the ``scala-library.jar`` JAR files, so let's add them to the compiler "
"classpath when we compile the source."
msgstr ""

# 6001a73c65744639a17a4fbeaef99a6f
#: ../../intro/getting-started-first-java.rst:433
msgid ""
"When we have compiled the source file we are ready to run the application. "
"This is done with ``java`` but yet again we need to add the ``akka-actor-2.0-"
"SNAPSHOT.jar`` and the ``scala-library.jar`` JAR files to the classpath as "
"well as the classes we compiled ourselves."
msgstr ""

# 6001e55f42a945bd89c05f47ba1adbd1
# aa041f81d6cd49729155878687cee25e
# 90a137f27f0b49d3bc45a099d5c07f45
# 12c4188230194a71ab7a64c23c19328d
#: ../../intro/getting-started-first-java.rst:456
#: ../../intro/getting-started-first-java.rst:488
#: ../../intro/getting-started-first-scala.rst:492
#: ../../intro/getting-started-first-scala.rst:519
msgid "Yippee! It is working."
msgstr ""

# 47759b230a7b43eebf9a30567ad21bad
#: ../../intro/getting-started-first-java.rst:459
msgid "Run it inside Maven"
msgstr ""

# 3e9f8e6b7ba74584a3a16dbf48f4d9ec
#: ../../intro/getting-started-first-java.rst:461
msgid ""
"If you used Maven, then you can run the application directly inside Maven. "
"First you need to compile the project."
msgstr ""

# 0643db64376d4cafb1d6aeee0458ed6f
#: ../../intro/getting-started-first-java.rst:471
msgid "When this in done we can run our application directly inside Maven."
msgstr ""

# 4a652a7bcaf64fbfa60f768975b04722
# 9824de6e60ad43dd99a156d356d5be3b
#: ../../intro/getting-started-first-java.rst:491
#: ../../intro/getting-started-first-scala.rst:522
msgid "Overriding Configuration Externally (Optional)"
msgstr ""

# 8f725a8238f74ff1a922c6e953aad679
# 412ec01176934b51815e4de905279d66
#: ../../intro/getting-started-first-java.rst:493
#: ../../intro/getting-started-first-scala.rst:524
msgid ""
"The sample project includes an ``application.conf`` file in the resources "
"directory:"
msgstr ""

# be70c3caf3594bca91d2a45575b57c77
#: ../../intro/getting-started-first-java.rst:497
msgid ""
"If you uncomment the two lines, you should see a change in performance, "
"hopefully for the better (you might want to increase the number of messages "
"in the code to prolong the time the application runs). It should be noted "
"that overriding only works if a router type is given, so just uncommenting "
"``nr-of-instances`` does not work; see :ref:`routing-java` for more details."
msgstr ""

# ab33f97903cb4e0c8196964938feb176
#: ../../intro/getting-started-first-java.rst:505
msgid ""
"Make sure that your ``application.conf`` is on the class path when you run "
"the application. If running from inside Maven that should already be the "
"case, otherwise you need to add the directory containing this file to the "
"JVM’s ``-classpath`` option."
msgstr ""

# 569c11d844674ec3989b1c914c87cb0a
# 480fb802c76c4ad3a12a2014b0036b92
#: ../../intro/getting-started-first-java.rst:511
#: ../../intro/getting-started-first-scala.rst:542
msgid "Conclusion"
msgstr ""

# 59baaaeb5c1a4870aee5649c24217118
# 7bfb1f6a20644493b749c65658698184
#: ../../intro/getting-started-first-java.rst:513
#: ../../intro/getting-started-first-scala.rst:544
msgid ""
"We have learned how to create our first Akka project using Akka's actors to "
"speed up a computation-intensive problem by scaling out on multi-core "
"processors (also known as scaling up). We have also learned to compile and "
"run an Akka project using either the tools on the command line or the SBT "
"build system."
msgstr ""

# f3dcc1ec0e1a4b03b769ebde5e149ed6
# 04e09e2ea5ab4aecbe9d2d8f90cffcd2
#: ../../intro/getting-started-first-java.rst:515
#: ../../intro/getting-started-first-scala.rst:549
msgid ""
"If you have a multi-core machine then I encourage you to try out different "
"number of workers (number of working actors) by tweaking the ``nrOfWorkers`` "
"variable to for example; 2, 4, 6, 8 etc. to see performance improvement by "
"scaling up."
msgstr ""

# f3a3807fe9704ccb93f6591b34429f80
# f8ba24a8a8d747cfa37d8d02819b50c4
#: ../../intro/getting-started-first-java.rst:517
#: ../../intro/getting-started-first-scala.rst:554
msgid "Happy hakking."
msgstr ""

# 162012c1669543e181f16e8e204287b6
#: ../../intro/getting-started-first-scala.rst:6
msgid "Getting Started Tutorial (Scala): First Chapter"
msgstr ""

# 55aa2541d2fb40a5bdeba7a8516fd9cd
#: ../../intro/getting-started-first-scala.rst:12
msgid ""
"Welcome to the first tutorial on how to get started with Akka and Scala. We "
"assume that you already know what Akka and Scala are and will now focus on "
"the steps necessary to start your first project."
msgstr ""

# 0ea385b282a3498bbd2f6dfe18c80d22
#: ../../intro/getting-started-first-scala.rst:19
msgid ""
"creating a SBT (Simple Build Tool) project and running it from within SBT"
msgstr ""

# db992b98aa0c469697b9f03b1004fb16
#: ../../intro/getting-started-first-scala.rst:46
msgid ""
"If you want don't want to type in the code and/or set up an SBT project then "
"you can check out the full tutorial from the Akka GitHub repository. It is "
"in the ``akka-tutorials/akka-tutorial-first`` module. You can also browse it "
"online `here`__, with the actual source code `here`__."
msgstr ""

# b27c5893ccb64ff5ae777b20f93c2a23
#: ../../intro/getting-started-first-scala.rst:69
msgid ""
"This tutorial assumes that you have Java 1.6 or later installed on you "
"machine and ``java`` on your ``PATH``. You also need to know how to run "
"commands in a shell (ZSH, Bash, DOS etc.) and a decent text editor or IDE to "
"type in the Scala code."
msgstr ""

# d3073556e55947439fff6e8639cbe103
#: ../../intro/getting-started-first-scala.rst:181
msgid ""
"``akka-durable-mailboxes`` -- Durable mailboxes: file-based, MongoDB, Redis, "
"Zookeeper"
msgstr ""

# dee0ac8d55e14578bb78788fca03eea7
#: ../../intro/getting-started-first-scala.rst:183
msgid "``akka-amqp`` -- AMQP integration"
msgstr ""

# 9d81be4d7a4945aeabed3fbec2300ad6
#: ../../intro/getting-started-first-scala.rst:192
msgid "Downloading and installing Scala"
msgstr ""

# 4d62177317e043fe8aff98d3ac563db3
#: ../../intro/getting-started-first-scala.rst:194
msgid ""
"To build and run the tutorial sample from the command line, you have to "
"install the Scala distribution. If you prefer to use SBT to build and run "
"the sample then you can skip this section and jump to the next one."
msgstr ""

# bfa974083bb442308f6f637f78d9357f
#: ../../intro/getting-started-first-scala.rst:198
msgid ""
"Scala can be downloaded from http://www.scala-lang.org/downloads. Browse "
"there and download the Scala 2.9.1 release. If you pick the ``tgz`` or "
"``zip`` distribution then just unzip it where you want it installed. If you "
"pick the IzPack Installer then double click on it and follow the "
"instructions."
msgstr ""

# 6d4ab6d9564d4636b35e27164d3e0dfd
#: ../../intro/getting-started-first-scala.rst:203
msgid ""
"You also need to make sure that the ``scala-2.9.1/bin`` (if that is the "
"directory where you installed Scala) is on your ``PATH``."
msgstr ""

# 2acc9b9f12ff4cb7adea6ef374f68871
#: ../../intro/getting-started-first-scala.rst:214
msgid "You can test your installation by invoking scala."
msgstr ""

# 35dd2f02c548469eb72a618d5eb00544
#: ../../intro/getting-started-first-scala.rst:226
msgid ""
"Looks like we are all good. Finally let's create a source file ``Pi.scala`` "
"for the tutorial and put it in the root of the Akka distribution in the "
"``tutorial`` directory (you have to create it first)."
msgstr ""

# 73569be445d5407f87767b643f381d12
#: ../../intro/getting-started-first-scala.rst:230
msgid ""
"Some tools require you to set the ``SCALA_HOME`` environment variable to the "
"root of the Scala distribution, however Akka does not require that."
msgstr ""

# 13de05ccffe343ffaca22c31c64611b0
#: ../../intro/getting-started-first-scala.rst:237
msgid "Downloading and installing SBT"
msgstr ""

# f6ef2deedfc44d5b953e3ec145de5ce6
#: ../../intro/getting-started-first-scala.rst:239
msgid ""
"SBT, short for 'Simple Build Tool' is an excellent build system written in "
"Scala. It uses Scala to write the build scripts which gives you a lot of "
"power. It has a plugin architecture with many plugins available, something "
"that we will take advantage of soon. SBT is the preferred way of building "
"software in Scala and is probably the easiest way of getting through this "
"tutorial. If you want to use SBT for this tutorial then follow the following "
"instructions, if not you can skip this section and the next."
msgstr ""

# 0dd61b72ae77421381956321f67a08df
#: ../../intro/getting-started-first-scala.rst:247
msgid ""
"To install SBT and create a project for this tutorial it is easiest to "
"follow the instructions on https://github.com/harrah/xsbt/wiki/Setup."
msgstr ""

# 80670be38de2451eb6e56d918fc0d1d0
#: ../../intro/getting-started-first-scala.rst:250
msgid ""
"Now we need to create our first Akka project. You could add the dependencies "
"manually to the build script, but the easiest way is to use Akka's SBT "
"Plugin, covered in the next section."
msgstr ""

# 96dcba3d8761400aa8927327a43a9bf6
#: ../../intro/getting-started-first-scala.rst:256
msgid "Creating an Akka SBT project"
msgstr ""

# eec484d0ef6344808d1bc61594da32d0
#: ../../intro/getting-started-first-scala.rst:258
msgid ""
"If you have not already done so, now is the time to create an SBT project "
"for our tutorial. You do that by adding the following content to ``build."
"sbt`` file in the directory you want to create your project in::"
msgstr ""

# 2cf7f3d832074a97bd635e4214d5d7d2
#: ../../intro/getting-started-first-scala.rst:272
msgid ""
"Create a directory ``src/main/scala`` in which you will store the Scala "
"source files."
msgstr ""

# 71f73a7173ba44f98b7d79f02559cdb0
#: ../../intro/getting-started-first-scala.rst:275
msgid ""
"Not needed in this tutorial, but if you would like to use additional Akka "
"modules beyond ``akka-actor``, you can add these as ``libraryDependencies`` "
"in ``build.sbt``. Note that there must be a blank line between each. Here is "
"an example adding ``akka-remote``::"
msgstr ""

# 563658ac9a6544458d233b0ead25f7e0
#: ../../intro/getting-started-first-scala.rst:284
msgid "So, now we are all set."
msgstr ""

# fad5f0e7e25445998eae63f0407b0047
#: ../../intro/getting-started-first-scala.rst:286
msgid ""
"SBT itself needs a whole bunch of dependencies but our project will only "
"need one; ``akka-actor-2.0-SNAPSHOT.jar``. SBT will download that as well."
msgstr ""

# 62014271b38644139291a8c24062743e
#: ../../intro/getting-started-first-scala.rst:295
msgid ""
"We start by creating a ``Pi.scala`` file and adding these import statements "
"at the top of the file:"
msgstr ""

# f58dc827cb0a41cca19f4c45bc200b2a
#: ../../intro/getting-started-first-scala.rst:300
msgid ""
"If you are using SBT in this tutorial then create the file in the ``src/main/"
"scala`` directory."
msgstr ""

# 954b5ed70ca24bb39d0713b864f5954d
#: ../../intro/getting-started-first-scala.rst:303
msgid ""
"If you are using the command line tools then create the file wherever you "
"want. I will create it in a directory called ``tutorial`` at the root of the "
"Akka distribution, e.g. in ``$AKKA_HOME/tutorial/Pi.scala``."
msgstr ""

# bfd498b940504a8d83d2e5d39b32d72a
#: ../../intro/getting-started-first-scala.rst:330
msgid ""
"Messages sent to actors should always be immutable to avoid sharing mutable "
"state. In scala we have 'case classes' which make excellent messages. So "
"let's start by creating three messages as case classes.  We also create a "
"common base trait for our messages (that we define as being ``sealed`` in "
"order to prevent creating messages outside our control):"
msgstr ""

# 1f6870d1bc9441a3bbc340d2a1cc330e
#: ../../intro/getting-started-first-scala.rst:342
msgid ""
"Now we can create the worker actor. This is done by mixing in the ``Actor`` "
"trait and defining the ``receive`` method. The ``receive`` method defines "
"our message handler. We expect it to be able to handle the ``Work`` message "
"so we need to add a handler for this message:"
msgstr ""

# 84bc54f4b05544458e32dab3b178fc52
#: ../../intro/getting-started-first-scala.rst:350
msgid ""
"As you can see we have now created an ``Actor`` with a ``receive`` method as "
"a handler for the ``Work`` message. In this handler we invoke the "
"``calculatePiFor(..)`` method, wrap the result in a ``Result`` message and "
"send it back asynchronously to the original sender using the ``sender`` "
"reference. In Akka the sender reference is implicitly passed along with the "
"message so that the receiver can always reply or store away the sender "
"reference for future use."
msgstr ""

# 046d01f00e7f40819a67a21e2305fd33
#: ../../intro/getting-started-first-scala.rst:357
msgid ""
"The only thing missing in our ``Worker`` actor is the implementation on the "
"``calculatePiFor(..)`` method. While there are many ways we can implement "
"this algorithm in Scala, in this introductory tutorial we have chosen an "
"imperative style using a for comprehension and an accumulator:"
msgstr ""

# b312216085224dc4858bfde487a28d1f
#: ../../intro/getting-started-first-scala.rst:398
msgid ""
"The ``Result`` handler gets the value from the ``Result`` message and "
"aggregates it to our ``pi`` member variable. We also keep track of how many "
"results we have received back, and if that matches the number of tasks sent "
"out, the ``Master`` actor considers itself done and sends the final result "
"to the ``listener``. When done it also invokes the ``context.stop(self)`` "
"method to stop itself *and* all its supervised actors. In this case it has "
"one supervised actor, the router, and this in turn has ``nrOfWorkers`` "
"supervised actors. All of them will be stopped automatically as the "
"invocation of any supervisor's ``stop`` method will propagate down to all "
"its supervised 'children'."
msgstr ""

# 4c8b10bfea0b4df6ace8a4ad51194106
#: ../../intro/getting-started-first-scala.rst:423
msgid ""
"Now the only thing that is left to implement is the runner that should "
"bootstrap and run the calculation for us. We do that by creating an object "
"that we call ``Pi``, here we can extend the ``App`` trait in Scala, which "
"means that we will be able to run this as an application directly from the "
"command line."
msgstr ""

# fbdb7a7690c84163b7d10af39c51ee47
#: ../../intro/getting-started-first-scala.rst:428
msgid ""
"The ``Pi`` object is a perfect container module for our actors and messages, "
"so let's put them all there. We also create a method ``calculate`` in which "
"we start up the ``Master`` actor and wait for it to finish:"
msgstr ""

# 16650b12e17143f3a21dc6903ad1cdf1
#: ../../intro/getting-started-first-scala.rst:435
msgid ""
"As you can see the *calculate* method above it creates an ``ActorSystem`` "
"and this is the Akka container which will contain all actors created in that "
"\"context\". An example of how to create actors in the container is the "
"*'system.actorOf(...)'* line in the calculate method. In this case we create "
"two top level actors. If you instead where in an actor context, i.e. inside "
"an actor creating other actors, you should use *context.actorOf(...)*. This "
"is illustrated in the Master code above."
msgstr ""

# 2522470d9ee24880a3d464959f6b1413
#: ../../intro/getting-started-first-scala.rst:443
msgid ""
"But before we package it up and run it, let's take a look at the full code "
"now, with package declaration, imports and all:"
msgstr ""

# c81b6d6f6d2f40c59c8e13d0b5602ffa
#: ../../intro/getting-started-first-scala.rst:452
msgid ""
"If you have not typed in (or copied) the code for the tutorial as in ``"
"$AKKA_HOME/akka-tutorials/akka-tutorial-first/src/main/scala/akka/tutorial/"
"first/scala/Pi.scala`` then now is the time. When that's done open up a "
"shell and step in to the Akka distribution (``cd $AKKA_HOME``)."
msgstr ""

# 51cb7be77171407781c783b059622ceb
#: ../../intro/getting-started-first-scala.rst:456
msgid ""
"First we need to compile the source file. That is done with Scala's compiler "
"``scalac``. Our application depends on the ``akka-actor-2.0-SNAPSHOT.jar`` "
"JAR file, so let's add that to the compiler classpath when we compile the "
"source."
msgstr ""

# bde1c101a2164f9690bab60a37d7541f
#: ../../intro/getting-started-first-scala.rst:468
msgid ""
"When we have compiled the source file we are ready to run the application. "
"This is done with ``java`` but yet again we need to add the ``akka-actor-2.0-"
"SNAPSHOT.jar`` JAR file to the classpath, and this time we also need to add "
"the Scala runtime library ``scala-library.jar`` and the classes we compiled "
"ourselves."
msgstr ""

# d9ee8687f0724987b002e3f8db09b374
#: ../../intro/getting-started-first-scala.rst:495
msgid "Run it inside SBT"
msgstr ""

# deb3b7d278d248a4b9e14fb238be9f8e
#: ../../intro/getting-started-first-scala.rst:497
msgid ""
"If you used SBT, then you can run the application directly inside SBT. First "
"you need to compile the project."
msgstr ""

# 21dea8fc26364062b40565a35f046aa0
#: ../../intro/getting-started-first-scala.rst:512
msgid "When this in done we can run our application directly inside SBT::"
msgstr ""

# 22af05a22a2d49a982db137d8f0f3abe
#: ../../intro/getting-started-first-scala.rst:528
msgid ""
"If you uncomment the two lines, you should see a change in performance, "
"hopefully for the better (you might want to increase the number of messages "
"in the code to prolong the time the application runs). It should be noted "
"that overriding only works if a router type is given, so just uncommenting "
"``nr-of-instances`` does not work; see :ref:`routing-scala` for more details."
msgstr ""

# 786d65d8e8ce4884b9b8821a1c027fd3
#: ../../intro/getting-started-first-scala.rst:536
msgid ""
"Make sure that your ``application.conf`` is on the class path when you run "
"the application. If running from inside SBT that should already be the case, "
"otherwise you need to add the directory containing this file to the JVM’s ``-"
"classpath`` option."
msgstr ""

# 518c713d96c6457dbd19a22db086422d
#: ../../intro/use-cases.rst:6
msgid "Examples of use-cases for Akka"
msgstr ""

# 5a3b8186a5e84037889262139bcacc3a
# f885226fefb54161b2cdf2e7c41b626d
#: ../../intro/use-cases.rst:8 ../../intro/why-akka.rst:34
msgid ""
"We see Akka being adopted by many large organizations in a big range of "
"industries all from investment and merchant banking, retail and social "
"media, simulation, gaming and betting, automobile and traffic systems, "
"health care, data analytics and much more. Any system that have the need for "
"high-throughput and low latency is a good candidate for using Akka."
msgstr ""

# e0f17349d0f24e239767722ba1ceed4f
#: ../../intro/use-cases.rst:14
msgid ""
"There is a great discussion on use-cases for Akka with some good write-ups "
"by production users `here <http://stackoverflow.com/questions/4493001/good-"
"use-case-for-akka/4494512#4494512>`_"
msgstr ""

# 010d64870d2e47b089de14ae439e1e4a
#: ../../intro/use-cases.rst:18
msgid "Here are some of the areas where Akka is being deployed into production"
msgstr ""

# 6cedd066fdc84ba3bad7b19ca29d95d8
#: ../../intro/use-cases.rst:21
msgid ""
"Transaction processing (Online Gaming, Finance/Banking, Trading, Statistics, "
"Betting, Social Media, Telecom)"
msgstr ""

# 3971733f7f9247e89ee7a472fc96bd61
# ed7df2a87b2047feb229b576f7686a37
# a8b7022b9b7b464ebdc1c02d3a19ef2f
# dcc1a3e786fb4fcc9306601956598751
# fcf66b04c2724611baa90e0f964e142e
#: ../../intro/use-cases.rst:22 ../../intro/use-cases.rst:47
#: ../../intro/use-cases.rst:51 ../../intro/use-cases.rst:55
#: ../../intro/use-cases.rst:59
msgid "Scale up, scale out, fault-tolerance / HA"
msgstr ""

# dd16568549e74658bd74c4c632444f3c
#: ../../intro/use-cases.rst:25
msgid "Service backend (any industry, any app)"
msgstr ""

# 918107df4dec4b848d6bc315f0286087
#: ../../intro/use-cases.rst:26
msgid ""
"Service REST, SOAP, Cometd, WebSockets etc Act as message hub / integration "
"layer Scale up, scale out, fault-tolerance / HA"
msgstr ""

# 4c50c961517348c5a1015215722741c4
#: ../../intro/use-cases.rst:31
msgid "Concurrency/parallelism (any app)"
msgstr ""

# ba0e69cf93554fd790f907a31dd73d13
#: ../../intro/use-cases.rst:32
msgid ""
"Correct Simple to work with and understand Just add the jars to your "
"existing JVM project (use Scala, Java, Groovy or JRuby)"
msgstr ""

# d4bc252c46f143a6ab27fda02c6d0cb3
#: ../../intro/use-cases.rst:37
msgid "Simulation"
msgstr "シミュレーション"

# a604618cb110434784c86c822eaf826b
#: ../../intro/use-cases.rst:38
msgid "Master/Worker, Compute Grid, MapReduce etc."
msgstr "マスタ・ワーカ、計算グリッド、MapRedudeなど。"

# e727370867144b20bb55abca7413d92d
#: ../../intro/use-cases.rst:41
msgid "Batch processing (any industry)"
msgstr "バッチ処理（各業種）"

# 6ea1b9c9dc0144718e4f03b77a095b1b
#: ../../intro/use-cases.rst:42
msgid ""
"Camel integration to hook up with batch data sources Actors divide and "
"conquer the batch workloads"
msgstr ""

# 583ff72be2df4ede813a392fcec2d14a
#: ../../intro/use-cases.rst:46
msgid "Communications Hub (Telecom, Web media, Mobile media)"
msgstr "通信ハブ(電話、ウェブメディア、モバイルメディア)"

# e1bc91d493ad49d3b77513ffaf66ccd6
#: ../../intro/use-cases.rst:50
msgid "Gaming and Betting (MOM, online gaming, betting)"
msgstr "ゲーム・賭け(MOM、オンラインゲーム、賭け)"

# b2542a1fcd7b40b690800b26e926f9fc
#: ../../intro/use-cases.rst:54
msgid "Business Intelligence/Data Mining/general purpose crunching"
msgstr "ビジネスインテリジェンス・データマイニング・汎用目的クランチ"

# ebc0f82bd2114b3196c93aea233ee057
#: ../../intro/use-cases.rst:58
msgid "Complex Event Stream Processing"
msgstr "複雑なイベントストリーム処理"

# 80013a1bccd54bc3920a9d4f3f5cd8b4
#: ../../intro/what-is-akka.rst:6
msgid "What is Akka?"
msgstr "Akkaとは"

# d3e3af63a5a048be960d6c3203a3beff
#: ../../intro/what-is-akka.rst:8
msgid "**Scalable real-time transaction processing**"
msgstr "**スケーラブルなリアルタイムトランザクション処理**"

# f07e4fce2e4f4e7484ed5d03ce9d2a0f
#: ../../intro/what-is-akka.rst:10
msgid ""
"We believe that writing correct concurrent, fault-tolerant and scalable "
"applications is too hard. Most of the time it's because we are using the "
"wrong tools and the wrong level of abstraction. Akka is here to change that. "
"Using the Actor Model we raise the abstraction level and provide a better "
"platform to build correct concurrent and scalable applications. For fault-"
"tolerance we adopt the \"Let it crash\" model which have been used with "
"great success in the telecom industry to build applications that self-heals, "
"systems that never stop. Actors also provides the abstraction for "
"transparent distribution and the basis for truly scalable and fault-tolerant "
"applications."
msgstr ""

# 66506022e1f14d8f80bee0988f33ef19
#: ../../intro/what-is-akka.rst:20
msgid "Akka is Open Source and available under the Apache 2 License."
msgstr "AkkaはオープンソースでApache 2ライセンスの上で利用することが可能です。"

# fc3da83276614f94a2c622745ccab281
#: ../../intro/what-is-akka.rst:22
msgid "Download from http://akka.io/downloads/"
msgstr "http://akka.io/downloads/ からダウンロードしてください。"

# 785990bc823a4720b95563f3978c3ee5
#: ../../intro/what-is-akka.rst:26
msgid "Akka implements a unique hybrid"
msgstr "Akkaはユニークでハイブリッドな実装になっています。"

# 22a5639d8e3d45a0bd88b16542f0bbd9
#: ../../intro/what-is-akka.rst:29
msgid "Actors"
msgstr "アクタ"

# 7b258ee002484e79b04aad42d0f637e0
#: ../../intro/what-is-akka.rst:31
msgid "Actors give you:"
msgstr "アクタは次をもたらします："

# 132f8f96891b46fe9274a8ee40ecaf12
#: ../../intro/what-is-akka.rst:33
msgid "Simple and high-level abstractions for concurrency and parallelism."
msgstr "シンプルで高度な並行・並列処理の抽象化"

# 1db36a6193c843ea81cf4113078bfa0b
#: ../../intro/what-is-akka.rst:34
msgid ""
"Asynchronous, non-blocking and highly performant event-driven programming "
"model."
msgstr "非同期、飲んブロッキング、ハイパフォーマンスなイベント駆動プログラミング"

# 80a5d971427943f3b9dbedc42087af5d
#: ../../intro/what-is-akka.rst:35
msgid ""
"Very lightweight event-driven processes (approximately 2.7 million actors "
"per GB RAM)."
msgstr ""

# 956719bd4d7c4986a79668763c08bb5b
#: ../../intro/what-is-akka.rst:37
msgid "See :ref:`actors-scala` and :ref:`untyped-actors-java`"
msgstr ""

# 413b9963532e4ec29e0cafce5ae4cedd
#: ../../intro/what-is-akka.rst:40
msgid "Fault Tolerance"
msgstr "耐障害性"

# 3716708fc17a48f8b88b746ab8e5015c
#: ../../intro/what-is-akka.rst:42
msgid ""
"Fault tolerance through supervisor hierarchies with \"let-it-crash\" "
"semantics. Excellent for writing highly fault-tolerant systems that never "
"stop, systems that self-heal. Supervisor hierarchies can span over multiple "
"JVMs to provide truly fault-tolerant systems."
msgstr ""

# 86bee72cf3cf4e88bcc0fdd7b1d3b1a0
#: ../../intro/what-is-akka.rst:47
msgid "See :ref:`fault-tolerance-scala` and :ref:`fault-tolerance-java`"
msgstr ""

# 4e8d2b17162c414c8a9b5c63fdc5d275
#: ../../intro/what-is-akka.rst:50
msgid "Location Transparency"
msgstr "位置透過性"

# 177fca1442074c94ad54477fbb5283c0
#: ../../intro/what-is-akka.rst:51
msgid ""
"Everything in Akka is designed to work in a distributed environment: all "
"interactions of actors use purely message passing and everything is "
"asynchronous."
msgstr ""

# 6a71f7ede324482dab8bc267d75e6ccf
#: ../../intro/what-is-akka.rst:54
msgid "For an overview of the remoting see :ref:`remoting`"
msgstr "リモート処理の全体像については :ref:`リモート処理<remoting>` を参照ください。"

# e47a6e5bf39a4736bc031a6166cfb7d8
#: ../../intro/what-is-akka.rst:57
msgid "Transactors"
msgstr "Transactor"

# ea409353ec184632b0a7813c972b0e7a
#: ../../intro/what-is-akka.rst:59
msgid ""
"Transactors combine actors and STM (Software Transactional Memory) into "
"transactional actors. It allows you to compose atomic message flows with "
"automatic retry and rollback."
msgstr ""

# d2d9d6b579884bbd92d676c28af6b855
#: ../../intro/what-is-akka.rst:62
msgid "See :ref:`transactors-scala` and :ref:`transactors-java`"
msgstr ":ref:`transactors-scala` と :ref:`transactors-java` を参照。"

# 05f3cd441e4f43cdbc722ca532de4663
#: ../../intro/what-is-akka.rst:66
msgid "Scala and Java APIs"
msgstr "ScalaとJavaのAPI"

# c6e6ef211e5d4902b8e0b095f55fd2b2
#: ../../intro/what-is-akka.rst:68
msgid "Akka has both a :ref:`scala-api` and a :ref:`java-api`."
msgstr "Akkaは :ref:`Scala<scala-api>` と :ref:`Java<java-api>` の両方のAPIがあります。"

# 1bcde7a3ba7744ab9e3009d0a190f24b
#: ../../intro/what-is-akka.rst:72
msgid "Akka can be used in two different ways"
msgstr "Akkaは２つのことなる方法で使用することが出来ます。"

# 8f7a0106291c49f8be5053f2e7a14cf6
#: ../../intro/what-is-akka.rst:74
msgid ""
"As a library: used by a web app, to be put into ``WEB-INF/lib`` or as a "
"regular JAR on your classpath."
msgstr ""

# a95362944e19410bb44c712446e04761
#: ../../intro/what-is-akka.rst:77
msgid "As a microkernel: stand-alone kernel to drop your application into."
msgstr ""

# 30f36d78e6da4b6087be8af6449d2f0b
#: ../../intro/what-is-akka.rst:79
msgid "See the :ref:`deployment-scenarios` for details."
msgstr "詳しくは :ref:`deployment-scenarios` を参照してください。"

# bfa3590fa04c4a3db51c817b1d03608b
#: ../../intro/what-is-akka.rst:82
msgid "What happened to Cloudy Akka?"
msgstr "Cloudy Akkaに何が起きたのか？"

# 693524a0027c497dbadc9e678359432a
#: ../../intro/what-is-akka.rst:84
msgid ""
"The commercial offering was earlier referred to as Cloudy Akka. This "
"offering consisted of two things:"
msgstr ""

# d17c98ff59794301add6c778d95f7b9e
#: ../../intro/what-is-akka.rst:87
msgid "Cluster support for Akka"
msgstr "Akkaのクラスタサポート"

# 3839c5ce0a994e4cb14ba23a608cc284
#: ../../intro/what-is-akka.rst:88
msgid "Monitoring & Management (formerly called Atmos)"
msgstr "監視と管理(正式名称はAtmos)"

# 246ff5e22eed4579a2b00b2eb169e415
#: ../../intro/what-is-akka.rst:90
msgid ""
"Cloudy Akka have been discontinued and the Cluster support is now being "
"moved into the Open Source version of Akka (the upcoming Akka 2.1), while "
"the Monitoring & Management (Atmos) is now rebranded into Typesafe Console "
"and is part of the commercial subscription for the Typesafe Stack (see below "
"for details)."
msgstr ""

# 42fa35a64813416fb98f9c1383883a37
#: ../../intro/what-is-akka.rst:96
msgid "Typesafe Stack"
msgstr "Typesafe Stack"

# d6ba906d08b14736a820c8063db52e8e
#: ../../intro/what-is-akka.rst:98
msgid ""
"Akka is now also part of the `Typesafe Stack <http://typesafe.com/stack>`_."
msgstr "Akkaは現在 `Typesafe Stack <http://typesafe.com/stack>`_ の一部となっています。"

# a3c389dcc3c14545a6ce48c28da55af9
#: ../../intro/what-is-akka.rst:100
msgid ""
"The Typesafe Stack is a modern software platform that makes it easy for "
"developers to build scalable software applications. It combines the Scala "
"programming language, Akka, the Play! web framework and robust developer "
"tools in a simple package that integrates seamlessly with existing Java "
"infrastructure."
msgstr ""

# 8f44d3e446144a91843d5427807918aa
#: ../../intro/what-is-akka.rst:105
msgid "The Typesafe Stack is all fully open source."
msgstr "Typesafe Stackは完全にオープンソースです。"

# 90a1106832fe410681e146ddb4ed453b
#: ../../intro/what-is-akka.rst:108
msgid "Typesafe Console"
msgstr "Typesafeコンソール"

# bdce3adc94684af1ad204e867bab72d8
#: ../../intro/what-is-akka.rst:110
msgid ""
"On top of the Typesafe Stack we have also have commercial product called "
"Typesafe Console which provides the following features:"
msgstr ""

# 256810062e6841939a5ab160155a4e3f
#: ../../intro/what-is-akka.rst:113
msgid "Slick Web UI with real-time view into the system"
msgstr ""

# d3b69a1e62e54ca9a6fabcdad8b8ceaf
#: ../../intro/what-is-akka.rst:114
msgid "Management through Dashboard, JMX and REST"
msgstr "ダッシュボード、JMX、RESTによる管理"

# 588b18675f104eff85d51cfdd17979c2
#: ../../intro/what-is-akka.rst:115
msgid "Dapper-style tracing of messages across components and remote nodes"
msgstr ""

# ace015ff01304fa6887111eebf32e45e
#: ../../intro/what-is-akka.rst:116
msgid "Real-time statistics"
msgstr "リアルタイム統計"

# 66307449123a4601b4bbdca90b51b00e
#: ../../intro/what-is-akka.rst:117
msgid "Very low overhead monitoring agents (should always be on in production)"
msgstr "とても低いオーバーヘッドの監視エージェント(本番運用にて使用できる)"

# 89a0876312cd44a7869ff4d6098701c1
#: ../../intro/what-is-akka.rst:118
msgid "Consolidation of statistics and logging information to a single node"
msgstr ""

# dd8638d8ae0b4737ae7cd99c185bf18f
#: ../../intro/what-is-akka.rst:119
msgid "Storage of statistics data for later processing"
msgstr "後処理用統計データのストレージ"

# f6b62b34d50445c5b364172bd797e26b
#: ../../intro/what-is-akka.rst:120
msgid "Provisioning and rolling upgrades"
msgstr "プロビジョニングとアップグレードについて"

# 71b1a178a5d645b4b8d337f05ec51a50
#: ../../intro/what-is-akka.rst:122
msgid "Read more `here <http://typesafe.com/products/typesafe-subscription>`_."
msgstr "詳しくは、`こちら <http://typesafe.com/products/typesafe-subscription>`_ まで。"

# 241bc51502594996b93e4f3e6d786c19
#: ../../intro/why-akka.rst:2
msgid "Why Akka?"
msgstr "なぜAkkaを使うのか"

# e3c9b307b083406493b3f983419ced9e
#: ../../intro/why-akka.rst:5
msgid "What features can the Akka platform offer, over the competition?"
msgstr ""

# f38c585ae3c845178b4f1e5b33b12f27
#: ../../intro/why-akka.rst:7
msgid "Akka provides scalable real-time transaction processing."
msgstr "Akkaはスケーラブルなリアルタイムトランザクション処理を提供します。"

# 422ea6231a6645c4bb85e9a9d67cbfbf
#: ../../intro/why-akka.rst:9
msgid "Akka is an unified runtime and programming model for:"
msgstr "Akkaは次のような統一された実行環境とプログラミングモデルです。"

# 0c9b9b5f1edc486dbc03843ac30bfc2e
#: ../../intro/why-akka.rst:11
msgid "Scale up (Concurrency)"
msgstr "スケールアップ(並行処理)"

# f734fc2002c34bf3b54adfd7941a0f0c
#: ../../intro/why-akka.rst:12
msgid "Scale out (Remoting)"
msgstr "スケールアウト(リモート処理)"

# 95aad31649ea4d08ab9fc0df1fa2f0e4
#: ../../intro/why-akka.rst:13
msgid "Fault tolerance"
msgstr "耐故障性"

# ab65592d31f242a9b9c8a83e9806da4c
#: ../../intro/why-akka.rst:15
msgid ""
"One thing to learn and admin, with high cohesion and coherent semantics."
msgstr ""

# 9fd22d0fb078459784769b62589b9d1a
#: ../../intro/why-akka.rst:17
msgid ""
"Akka is a very scalable piece of software, not only in the performance "
"sense, but in the size of applications it is useful for. The core of Akka, "
"akka-actor, is very small and easily dropped into an existing project where "
"you need asynchronicity and lockless concurrency without hassle."
msgstr ""
"Akkaはとてもスケーラブルなソフトウェアです。パフォーマンス性能だけでなく"
"アプリケーションの使いやすさをを考慮しています。Akkaのコア機能であるAkka"
"アクタは、とても小さく既存プロジェクトへ容易さを投入します。"

# 6ca94a4cb136402eb7cd6ce5ddbecb30
#: ../../intro/why-akka.rst:22
msgid ""
"You can choose to include only the parts of akka you need in your "
"application and then there's the whole package, the Akka Microkernel, which "
"is a standalone container to deploy your Akka application in. With CPUs "
"growing more and more cores every cycle, Akka is the alternative that "
"provides outstanding performance even if you're only running it on one "
"machine. Akka also supplies a wide array of concurrency-paradigms, allowing "
"for users to choose the right tool for the job."
msgstr ""

# d72302f04bfd4016bc05d041d4aa85e0
#: ../../intro/why-akka.rst:32
msgid "What's a good use-case for Akka?"
msgstr "Akkaのユースケースとしてよいものは？"

# c8320f54174d48f9a7776fa4036f67ab
#: ../../intro/why-akka.rst:40
msgid ""
"Actors lets you manage service failures (Supervisors), load management (back-"
"off strategies, timeouts and processing-isolation), both horizontal and "
"vertical scalability (add more cores and/or add more machines)."
msgstr ""

# cc89c50e83074879b418dba831d77464
#: ../../intro/why-akka.rst:44
msgid ""
"Here's what some of the Akka users have to say about how they are using "
"Akka: http://stackoverflow.com/questions/4493001/good-use-case-for-akka"
msgstr ""

# abc2a496011c47c4b4f80d298849f6d0
#: ../../intro/why-akka.rst:47
msgid "All this in the ApacheV2-licensed open source project."
msgstr "これらすべては、ApacheV2ライセンスのオープンソースプロジェクトです。"

