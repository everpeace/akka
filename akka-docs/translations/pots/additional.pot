# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2011, Typesafe Inc
# This file is distributed under the same license as the Akka package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: Akka 2.0-SNAPSHOT\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2012-04-10 21:41\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../additional/companies-using-akka.rst:2
# 3f18e03ca6ec47918b2811465d932202
msgid "Companies and Open Source projects using Akka"
msgstr ""

#: ../../additional/companies-using-akka.rst:5
# 37c20af48bbe4483b4a4d88e0e82dcc0
msgid "Production Users"
msgstr ""

#: ../../additional/companies-using-akka.rst:7
# 88b423b9bb7049f4a9091e9037fd1a36
msgid "These are some of the production Akka users that are able to talk about their use publicly."
msgstr ""

#: ../../additional/companies-using-akka.rst:10
# 245805bec3044ca383dc0d1447f0a9c9
msgid "CSC"
msgstr ""

#: ../../additional/companies-using-akka.rst:12
# 08c188e0cd1249059566c78f80ee93aa
msgid "CSC is a global provider of information technology services. The Traffic Management business unit in the Netherlands is a systems integrator for the implementation of Traffic Information and Traffic Enforcement Systems, such as section control, weigh in motion, travel time and traffic jam detection and national data warehouse for traffic information. CSC Traffic Management is using Akka for their latest Traffic Information and Traffic Enforcement Systems."
msgstr ""

#: ../../additional/companies-using-akka.rst:14
# 448e7908c35f41789f9f67f579991434
msgid "`<http://www.csc.com/nl/ds/42449-traffic_management>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:16
# e14de5b60d3a42dfb980f11c19b912a4
msgid "*\"Akka has been in use for almost a year now (since 0.7) and has been used successfully for two projects so far. Akka has enabled us to deliver very flexible, scalable and high performing systems with as little friction as possible. The Actor model has simplified a lot of concerns in the type of systems that we build and is now part of our reference architecture. With Akka we deliver systems that meet the most strict performance requirements of our clients in a near-realtime environment. We have found the Akka framework and it's support team invaluable.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:19
# 7499c0656acd411391073fa416ec56a5
msgid "Thatcham Motor Insurance Repair Research Centre"
msgstr ""

#: ../../additional/companies-using-akka.rst:21
# 7704fc3e4de64e78b0da650386fe1635
msgid "Thatcham is a EuroNCAP member. They research efficient, safe, cost effective repair of vehicles, and work with manufacturers to influence the design of new vehicles Thatcham are using Akka as the implementation for their distributed modules. All Scala based research software now talks to an Akka based publishing platform. Using Akka enables Thatcham to 'free their domain', and ensures that the platform is cloud enabled and scalable, and that the team is confident that they are flexible. Akka has been in use, tested under load at Thatcham for almost a year, with no problems migrating up through the different versions. An old website currently under redesign on a new Scala powered platform: `www.thatcham.org <http://www.thatcham.org>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:23
# 95c12b97e6404442a8ee1c5e873d3391
msgid "*“We have been in production with Akka for over 18 months with zero downtime. The core is rock solid, never a problem, performance is great, integration capabilities are diverse and ever growing, and the toolkit is just a pleasure to work with. Combine that with the excellent response you get from the devs and users on this list and you have a winner. Absolutely no regrets on our part for choosing to work with Akka.”*"
msgstr ""

#: ../../additional/companies-using-akka.rst:25
# cbdaf7faf2c94313b4ada9a1f1e22fee
msgid "*\"Scala and Akka are now enabling improvements in the standard of vehicle damage assessment, and in the safety of vehicle repair across the UK, with Europe, USA, Asia and Australasia to follow. Thatcham (Motor Insurance Repair Research Centre) are delivering crash specific information with linked detailed repair information for over 7000 methods.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:27
# 5c2f2e47c46d44378d0caf00766491c4
msgid "*For Thatcham, the technologies enable scalability and elegance when dealing with complicated design constraints. Because of the complexity of interlinked methods, caching is virtually impossible in most cases, so in steps the 'actors' paradigm. Where previously something like JMS would have provided a stable but heavyweight, rigid solution, Thatcham are now more flexible, and can expand into the cloud in a far simpler, more rewarding way.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:29
# bfb6a1ce121c4319ac5c1023cbf25e02
msgid "*Thatcham's customers, body shop repairers and insurers receive up to date repair information in the form of crash repair documents of the quality necessary to ensure that every vehicle is repaired back to the original safety standard. In a market as important as this, availability is key, as is performance. Scala and Akka have delivered consistently so far.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:31
# 5033a1a8df65496bb80dba78efdd84ba
msgid "*While recently introduced, growing numbers of UK repairers are receiving up to date repair information from this service, with the rest to follow shortly. Plans are already in motion to build new clusters to roll the service out across Europe, USA, Asia and Australasia.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:33
# 8815c34ca782464f825121f1b7a31905
msgid "*The sheer opportunities opened up to teams by Scala and Akka, in terms of integration, concise expression of intent and scalability are of huge benefit.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:36
# e4642d0cec27486ea5676da415be7035
msgid "SVT (Swedish Television)"
msgstr ""

#: ../../additional/companies-using-akka.rst:38
# 237283d8c70844de86c1c85a6c6ba339
msgid "`<http://svt.se>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:40
# 6f45c02f7e26486e9c1951520ea0f391
msgid "*“I’m currently working in a project at the Swedish Television where we’re developing a subtitling system with collaboration capabilities similar to Google Wave. It’s a mission critical system and the design and server implementation is all based on Akka and actors etc. We’ve been running in production for about 6 months and have been upgrading Akka whenever a new release comes out. We’ve never had a single bug due to Akka, and it’s been a pure pleasure to work with. I would choose Akka any day of the week!*"
msgstr ""

#: ../../additional/companies-using-akka.rst:42
# 13d44a8d0a5d44dc94deacb85c84f6e6
msgid "*Our system is highly asynchronous so the actor style of doing things is a perfect fit. I don’t know about how you feel about concurrency in a big system, but rolling your own abstractions is not a very easy thing to do. When using Akka you can almost forget about all that. Synchronizing between threads, locking and protecting access to state etc. Akka is not just about actors, but that’s one of the most pleasurable things to work with. It’s easy to add new ones and it’s easy to design with actors. You can fire up work actors tied to a specific dispatcher etc. I could make the list of benefits much longer, but I’m at work right now. I suggest you try it out and see how it fits your requirements.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:44
# 73bed0e2e3704af8abdc3407ef715d1a
msgid "*We saw a perfect business reason for using Akka. It lets you concentrate on the business logic instead of the low level things. It’s easy to teach others and the business intent is clear just by reading the code. We didn’t chose Akka just for fun. It’s a business critical application that’s used in broadcasting. Even live broadcasting. We wouldn’t have been where we are today in such a short time without using Akka. We’re two developers that have done great things in such a short amount of time and part of this is due to Akka. As I said, it lets us focus on the business logic instead of low level things such as concurrency, locking, performance etc.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:47
# 1f4d3aefa9bb4b14aa0618dc05f88f3d
msgid "Tapad"
msgstr ""

#: ../../additional/companies-using-akka.rst:49
# 402785b2de9748a2822085e0f500a31a
msgid "`<http://tapad.com>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:51
# 32ee89f26e3c40cabbdf26f5ab80502b
msgid "*\"Tapad is building a real-time ad exchange platform for advertising on mobile and connected devices. Real-time ad exchanges allows for advertisers (among other things) to target audiences instead of buying fixed set of ad slots that will be displayed “randomly” to users. To developers without experience in the ad space, this might seem boring, but real-time ad exchanges present some really interesting technical challenges.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:53
# bc48eb2f47bd449694ca1bcb78f0315e
msgid "*Take for instance the process backing a page view with ads served by a real-time ad exchange auction (somewhat simplified):*"
msgstr ""

#: ../../additional/companies-using-akka.rst:55
# b55beb9c43f74e98a6d36656f909e1c8
msgid "*A user opens a site (or app) which has ads in it.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:56
# 0d5ccfd99f374c6ca1d558533d06d07a
msgid "*As the page / app loads, the ad serving components fires off a request to the ad exchange (this might just be due to an image tag on the page).*"
msgstr ""

#: ../../additional/companies-using-akka.rst:57
# 1f13087a1fc641adbb26db4f930ca5a1
msgid "*The ad exchange enriches the request with any information about the current user (tracking cookies are often employed for this) and and display context information (“news article about parenting”, “blog about food” etc).*"
msgstr ""

#: ../../additional/companies-using-akka.rst:58
# 52ef4975a9b447309d57148e6252f032
msgid "*The ad exchange forwards the enriched request to all bidders registered with the ad exchange.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:59
# d19c134f92e740aeacaff39b23486db1
msgid "*The bidders consider the provided user information and responds with what price they are willing to pay for this particular ad slot.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:60
# 4a9694c584b045499a03767c90e4705a
msgid "*The ad exchange picks the highest bidder and ensures that the winning bidder’s ad is shown to to user.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:62
# 57be77f41c114992a204c88b1be9b223
msgid "*Any latency in this process directly influences user experience latency, so this has to happen really fast. All-in-all, the total time should not exceed about 100ms and most ad exchanges allow bidders to spend about 60ms (including network time) to return their bids. That leaves the ad exchange with less than 40ms to facilitate the auction. At Tapad, this happens billions of times per month / tens of thousands of times per second.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:64
# 0bf1f8c7780e441996c5cb1e5033ab66
msgid "*Tapad is building bidders which will participate in auctions facilitated by other ad exchanges, but we’re also building our own. We are using Akka in several ways in several parts of the system. Here are some examples:*"
msgstr ""

#: ../../additional/companies-using-akka.rst:66
# a67281491ab54d74a6bba37da06b7443
msgid "*Plain old parallelization* *During an auction in the real-time exchange, it’s obvious that all bidders must receive the bid requests in parallel. An auctioneer actor sends the bid requests to bidder actors which in turn handles throttling and eventually IO. We use futures in these requests and the auctioneer discards any responses which arrive too late.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:69
# d593b52609d54dd2ad2f14baf220d838
msgid "*Inside our bidders, we also rely heavily on parallel execution. In order to determine how much to pay for an ad slot, several data stores are queried for information pertinent to the current user. In a “traditional” system, we’d be doing this sequentially, but again, due to the extreme latency constraints, we’re doing this concurrently. Again, this is done with futures and data that is not available in time, get cut from the decision making (and logged :)).*"
msgstr ""

#: ../../additional/companies-using-akka.rst:71
# f49e00921d3e46d8abc10835676c9928
msgid "*Maintaining state under concurrent load* *This is probably the de facto standard use case for the actors model. Bidders internal to our system are actors backed by a advertiser campaign. A campaign includes, among other things, budget and “pacing” information. The budget determines how much money to spend for the duration of the campaign, whereas pacing information might set constraints on how quickly or slowly the money should be spent. Ad traffic changes from day to day and from hour to hour and our spending algorithms considers past performance in order to spend the right amount of money at the right time. Needless to say, these algorithms use a lot of state and this state is in constant flux. A bidder with a high budget may see tens of thousands of bid requests per second. Luckily, due to round-robin load-balancing and the predictability of randomness under heavy traffic, the bidder actors do not share state across cluster nodes, they just share their instance count so they know which fraction of the campaign budget to try to spend.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:74
# f9d444912b6d4f16b8466ae53bf67376
msgid "*Pacing is also done for external bidders. Each 3rd party bidder end-point has an actor coordinating requests and measuring latency and throughput. The actor never blocks itself, but when an incoming bid request is received, it considers the current performance of the 3rd party system and decides whether to pass on the request and respond negatively immediately, or forward the request to the 3rd party request executor component (which handles the IO).*"
msgstr ""

#: ../../additional/companies-using-akka.rst:76
# 0f5483d4753b430f961a837701d37673
msgid "*Batch processing* *We store a lot of data about every single ad request we serve and this is stored in a key-value data store. Due to the performance characteristics of the data store, it is not feasible to store every single data point one at at time - it must be batched up and performed in parallel. We don’t need a durable messaging system for this (losing a couple of hundred data points is no biggie). All our data logging happens asynchronously and we have a basic load-balanced actors which batches incoming messages and writes on regular intervals (using Scheduler) or whenever the specified batch size has been reached.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:79
# d55cea49536a48619532181605f26ec2
msgid "*Analytics* *Needless to say, it’s not feasible / useful to store our traffic information in a relational database. A lot of analytics and data analysis is done “offline” with map / reduce on top the data store, but this doesn’t work well for real-time analytics which our customers love. We therefore have metrics actors that receives campaign bidding and click / impression information in real-time, aggregates this information over configurable periods of time and flushes it to the database used for customer dashboards for “semi-real-time” display. Five minute history is considered real-time in this business, but in theory, we could have queried the actors directly for really real-time data. :)*"
msgstr ""

#: ../../additional/companies-using-akka.rst:82
# 7b97ff3c09cf4ef889e2afdcfc51a5db
msgid "*Our Akka journey started as a prototyping project, but Akka has now become a crucial part of our system. All of the above mentioned components, except the 3rd party bidder integration, have been running in production for a couple of weeks (on Akka 1.0RC3) and we have not seen any issues at all so far.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:85
# 5b99c265301a4b0d97cad7693c7d058f
msgid "Flowdock"
msgstr ""

#: ../../additional/companies-using-akka.rst:87
# ffc057dba40546de99746c6ea4d21ea2
msgid "Flowdock delivers Google Wave for the corporate world."
msgstr ""

#: ../../additional/companies-using-akka.rst:89
# 58d0f7e035f84d1f8720480846487d03
msgid "*\"Flowdock makes working together a breeze. Organize the flow of information, task things over and work together towards common goals seamlessly on the web - in real time.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:91
# 86cf2db762904eee881ceb2a69501c83
msgid "`<http://flowdock.com/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:94
# 46bbbafb6efb444295bc38697b6f3d87
msgid "Travel Budget"
msgstr ""

#: ../../additional/companies-using-akka.rst:96
# d5978e12fa3d4fd99f7405b1756b3980
msgid "`<http://labs.inevo.pt/travel-budget>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:99
# 41206abf7c8b4298b3248fa3b0b416dc
msgid "Says.US"
msgstr ""

#: ../../additional/companies-using-akka.rst:101
# d2107e80beab4c328a08ddee9bc6b171
msgid "*\"says.us is a gathering place for people to connect in real time - whether an informal meeting of people who love Scala or a chance for people anywhere to speak out about the latest headlines.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:103
# af47b97dadc94ef5b583271080189268
msgid "`<http://says.us/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:106
# fc79ab67c4ef4c3fade684c1a9d9f3cf
msgid "LShift"
msgstr ""

#: ../../additional/companies-using-akka.rst:108
# e936d554025d4536a721432e81c09a5a
msgid "*\"Diffa is an open source data analysis tool that automatically establishes data differences between two or more real-time systems.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:109
# a07f2886abc942a88b60692f82082715
msgid "Diffa will help you compare local or distributed systems for data consistency, without having to stop them running or implement manual cross-system comparisons. The interface provides you with simple visual summary of any consistency breaks and tools to investigate the issues.*"
msgstr ""

#: ../../additional/companies-using-akka.rst:110
# 1bca077ec3c3466bb07efd9050196f71
msgid "Diffa is the ideal tool to use to investigate where or when inconsistencies are occurring, or simply to provide confidence that your systems are running in perfect sync. It can be used operationally as an early warning system, in deployment for release verification, or in development with other enterprise diagnosis tools to help troubleshoot faults.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:112
# c7c3b218691e41baa80f3399e1aa8823
msgid "`<http://diffa.lshift.net/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:115
# 078b88f7a94d479d9b68e01c78d3f789
msgid "Twimpact"
msgstr ""

#: ../../additional/companies-using-akka.rst:117
# 0d9887803dfb4d34bd342854b4f415c1
msgid "*\"Real-time twitter trends and user impact\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:119
# 39966adf40d146dc9d2b381578659036
msgid "`<http://twimpact.com>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:122
# f6875a6025734439bb8b71fe34a278f7
msgid "Rocket Pack Platform"
msgstr ""

#: ../../additional/companies-using-akka.rst:124
# 1ee909d9c1c4432183f360bdf9aa496e
msgid "*\"Rocket Pack Platform is the only fully integrated solution for plugin-free browser game development.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:126
# 011dbec9c71c46a6a96f9d65792d507b
msgid "`<http://rocketpack.fi/platform/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:129
# 7c584214a4044c4c904402b70c7e70ed
msgid "Open Source Projects using Akka"
msgstr ""

#: ../../additional/companies-using-akka.rst:132
# a83bdc8551624d9497fa22f292b16a3f
msgid "Redis client"
msgstr ""

#: ../../additional/companies-using-akka.rst:134
# b2bb16140f334110a264234c6d845c7c
msgid "*A Redis client written Scala, using Akka actors, HawtDispath and non-blocking IO. Supports Redis 2.0+*"
msgstr ""

#: ../../additional/companies-using-akka.rst:136
# 586e10d96a7a41ebbbcad24811af8268
msgid "`<http://github.com/derekjw/fyrie-redis>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:139
# ac00a12405ec4f44b071e78520411fe7
msgid "Narrator"
msgstr ""

#: ../../additional/companies-using-akka.rst:141
# 13b27448a48745e6b6db1444c10892ed
msgid "*\"Narrator is a a library which can be used to create story driven clustered load-testing packages through a very readable and understandable api.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:143
# ec64524004ec4af88130ccafb6c04daa
msgid "`<http://github.com/shorrockin/narrator>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:146
# 1f0fade8459242219dd00ff8d54e83f7
msgid "Kandash"
msgstr ""

#: ../../additional/companies-using-akka.rst:148
# 0e111aa9180d4059844d571c5f77b15a
msgid "*\"Kandash is a lightweight kanban web-based board and set of analytics tools.\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:150
# fe9f6c590d7940028bda7d6232a858fc
msgid "`<http://vasilrem.com/blog/software-development/kandash-project-v-0-3-is-now-available/>`_ `<http://code.google.com/p/kandash/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:154
# aff6c2c885c74eaface32a0cfb82256b
msgid "Wicket Cassandra Datastore"
msgstr ""

#: ../../additional/companies-using-akka.rst:156
# 513a44467107418cadebfaa74a00b8d5
msgid "This project provides an org.apache.wicket.pageStore.IDataStore implementation that writes pages to an Apache Cassandra cluster using Akka."
msgstr ""

#: ../../additional/companies-using-akka.rst:158
# db48810457444c7aa288756ca369c4d1
msgid "`<http://github.com/gseitz/wicket-cassandra-datastore/>`_"
msgstr ""

#: ../../additional/companies-using-akka.rst:161
# 44420c2ec4a14eb282452a202ce5de65
msgid "Spray"
msgstr ""

#: ../../additional/companies-using-akka.rst:163
# e45ccb7ae3784527b10c9f07d3edf182
msgid "*\"spray is a lightweight Scala framework for building RESTful web services on top of Akka actors and Akka Mist. It sports the following main features:*"
msgstr ""

#: ../../additional/companies-using-akka.rst:165
# d556bbbff26248dfb027513f926ac4c9
msgid "*Completely asynchronous, non-blocking, actor-based request processing for efficiently handling very high numbers of concurrent connections*"
msgstr ""

#: ../../additional/companies-using-akka.rst:166
# e52dadca761b419a8b97d7ba3f4204aa
msgid "*Powerful, flexible and extensible internal Scala DSL for declaratively defining your web service behavior*"
msgstr ""

#: ../../additional/companies-using-akka.rst:167
# 6ac20b44aa1c445f9261619601cb5512
msgid "*Immutable model of the HTTP protocol, decoupled from the underlying servlet container*"
msgstr ""

#: ../../additional/companies-using-akka.rst:168
# e5ca18d11b5f42c48105e50343d0c559
msgid "*Full testability of your REST services, without the need to fire up containers or actors\"*"
msgstr ""

#: ../../additional/companies-using-akka.rst:170
# d77f5178e35547fbac56087824bffeee
msgid "`<https://github.com/spray/spray/wiki>`_"
msgstr ""

#: ../../additional/index.rst:2
# 851cc1e5f23e493abdd38ae7ec0b9d31
msgid "Additional Information"
msgstr ""

#: ../../additional/language-bindings.rst:2
# 889f5510faac41eab06b4cc580038537
msgid "Other Language Bindings"
msgstr ""

#: ../../additional/language-bindings.rst:5
# bcbc02c9a9434210b5cc7d98b653af38
msgid "JRuby"
msgstr ""

#: ../../additional/language-bindings.rst:7
# 882085a0cc714cd689c838f669a07d1d
msgid "Read more here: `<https://github.com/iconara/mikka>`_."
msgstr ""

#: ../../additional/language-bindings.rst:10
# 8f794efbdc8045d7af889e5d5ba0d6fa
msgid "Groovy/Groovy++"
msgstr ""

#: ../../additional/language-bindings.rst:12
# 941bc3b61d9741ebb13b5fe14101d300
msgid "Read more here: `<https://gist.github.com/620439>`_."
msgstr ""

#: ../../additional/language-bindings.rst:15
# 0606b664efb844bbbc8e07790431e69c
msgid "Clojure"
msgstr ""

#: ../../additional/language-bindings.rst:17
# 133eb479b51a421887ea4ccb94fdf8ec
msgid "Read more here: `<http://blog.darevay.com/2011/06/clojure-and-akka-a-match-made-in/>`_."
msgstr ""

#: ../../additional/recipes.rst:2
# d211cc2df72f4502aea47e501501164c
msgid "Here is a list of recipes for all things Akka"
msgstr ""

#: ../../additional/recipes.rst:4
# de045a73ee364b05a1ec41e51b4637b8
msgid "`Martin Krassers Akka Event Sourcing example <https://github.com/krasserm/eventsourcing-example>`_"
msgstr ""

#: ../../additional/third-party-integrations.rst:2
# 9d9c6dc2edc04f0daf806484f9db4c53
msgid "Third-party Integrations"
msgstr ""

#: ../../additional/third-party-integrations.rst:5
# c023866786a2493eb4387353d59c41a6
msgid "The Play! Framework"
msgstr ""

#: ../../additional/third-party-integrations.rst:7
# 8a482eeb33944bde91a04ef80b66d493
msgid "Play 2.0 is based upon Akka. Uses all its eventing and threading using Akka actors and futures."
msgstr ""

#: ../../additional/third-party-integrations.rst:9
# c3bf5b6558214899bd49239493e9b4c1
msgid "Read more here: `<http://www.playframework.org/2.0>`_."
msgstr ""

#: ../../additional/third-party-integrations.rst:12
# 00038710226a40bebb644e08d32335e8
msgid "Scalatra"
msgstr ""

#: ../../additional/third-party-integrations.rst:14
# 0d45c617f81a41b0a55943f14bd14f75
msgid "Scalatra has Akka integration."
msgstr ""

#: ../../additional/third-party-integrations.rst:16
# e5c96ddfab5e436db6df9ce49b208619
msgid "Read more here: `<https://github.com/scalatra/scalatra/blob/develop/akka/src/main/scala/org/scalatra/akka/AkkaSupport.scala>`_"
msgstr ""

#: ../../additional/third-party-integrations.rst:19
# ab3fe866b38c435eb43848519e222a39
msgid "Gatling"
msgstr ""

#: ../../additional/third-party-integrations.rst:21
# 3d464a6268f94030abf4a2cc9b21d011
msgid "Gatling is an Open Source Stress Tool."
msgstr ""

#: ../../additional/third-party-integrations.rst:23
# b94a841923e841b58975f48fc167adc0
msgid "Read more here: `<http://gatling-tool.org/>`_"
msgstr ""

